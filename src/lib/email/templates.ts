// src/lib/email/templates.ts

import { DailyScheduleData, ScheduleConflict, ProcessedAppointment } from '../scheduling/daily-schedule-service';

export interface EmailTemplate {
  subject: string;
  htmlBody: string;
  textBody: string;
}

export class EmailTemplates {
  /**
   * Generate daily schedule email with improved office assignment info
   */
  static dailySchedule(data: DailyScheduleData): EmailTemplate {
    const { displayDate, appointments, conflicts, stats } = data;
    
    // Sort clinicians by last name
    const clinicianGroups = this.groupAppointmentsByClinicianLastName(appointments);
    
    // Generate the HTML email
    const htmlBody = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { 
      font-family: Arial, sans-serif; 
      line-height: 1.5;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
    }
    .header { 
      background-color: #4b6cb7; 
      color: white; 
      padding: 20px;
      border-radius: 5px 5px 0 0;
    }
    .content { 
      padding: 20px; 
      background-color: #f9f9f9;
    }
    table { 
      width: 100%; 
      border-collapse: collapse; 
      margin-bottom: 20px;
      border: 1px solid #ddd;
    }
    th { 
      background-color: #e6e6e6; 
      padding: 10px; 
      text-align: left;
      border: 1px solid #ddd;
    }
    td { 
      padding: 10px; 
      border: 1px solid #ddd; 
    }
    tr:nth-child(even) { 
      background-color: #f2f2f2; 
    }
    .conflicts { 
      background-color: #fff0f0; 
      border-left: 4px solid #ff6b6b; 
      padding: 15px;
      margin-bottom: 20px;
    }
    .high { 
      color: #d63031; 
      font-weight: bold;
    }
    .medium { 
      color: #e17055; 
    }
    .low { 
      color: #fdcb6e; 
    }
    .stats { 
      background-color: #e9f7ef; 
      padding: 15px;
      margin-bottom: 20px;
      border-left: 4px solid #27ae60;
    }
    .clinician-section {
      margin-bottom: 30px;
    }
    .clinician-name {
      font-size: 1.2em;
      font-weight: bold;
      margin-bottom: 10px;
      padding: 8px;
      background-color: #f0f8ff;
      border-left: 4px solid #4b6cb7;
    }
    .special-requirements {
      background-color: #f5f6fa;
      border-left: 4px solid #3498db;
      padding: 8px;
      margin-top: 5px;
      font-size: 0.9em;
    }
    .office-change {
      color: #e74c3c;
      font-weight: bold;
    }
    .office-change-note {
      background-color: #fef2f2;
      border-left: 4px solid #e74c3c;
      padding: 8px;
      margin-top: 5px;
      font-size: 0.9em;
    }
    .assignment-reason {
      background-color: #ecf0f1;
      border-left: 4px solid #7f8c8d;
      padding: 8px;
      margin-top: 5px;
      font-size: 0.9em;
      font-style: italic;
    }
    .clinician-conflicts {
      background-color: #fff0f0;
      border-left: 4px solid #ff6b6b;
      padding: 10px;
      margin: 8px 0;
      font-size: 0.9em;
    }
    .footer { 
      font-size: 12px; 
      color: #666; 
      padding: 20px; 
      text-align: center;
      border-top: 1px solid #ddd;
    }
    .telehealth {
      color: #3498db;
      font-style: italic;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Daily Schedule: ${displayDate}</h1>
  </div>
  <div class="content">
    <h2>Appointments</h2>
    ${this.renderClinicianGroups(clinicianGroups, data)}
    
    <h2>Schedule Overview</h2>
    <div class="stats">
      <h3>Summary</h3>
      <p>Total appointments: <strong>${stats.totalAppointments}</strong></p>
      <ul>
        <li>In-person sessions: ${stats.inPersonCount}</li>
        <li>Telehealth sessions: ${stats.telehealthCount}</li>
        <li>Group sessions: ${stats.groupCount}</li>
        <li>Family sessions: ${stats.familyCount}</li>
      </ul>
      
      <h3>Office Utilization</h3>
      <ul>
        ${Object.entries(stats.officeUtilization)
          .map(([officeId, count]) => `<li>Office ${officeId}: ${count} appointment(s)</li>`)
          .join('')}
      </ul>
    </div>
  </div>
  <div class="footer">
    <p>This report was automatically generated by Catalyst Scheduler on ${new Date().toLocaleString()}</p>
    <p>For questions or issues, please contact your administrator.</p>
  </div>
</body>
</html>
    `;
    
    // Generate plain text version
    const textBody = this.generateTextVersion(data, clinicianGroups);
    
    return {
      subject: `Daily Schedule: ${displayDate}`,
      htmlBody,
      textBody
    };
  }
  
  /**
   * Group appointments by clinician's last name
   */
  private static groupAppointmentsByClinicianLastName(
    appointments: ProcessedAppointment[]
  ): { clinicianName: string; appointments: ProcessedAppointment[]; lastName: string }[] {
    // Group appointments by clinician
    const appointmentsByClinicianMap = new Map<string, ProcessedAppointment[]>();
    
    appointments.forEach(appt => {
      if (!appointmentsByClinicianMap.has(appt.clinicianName)) {
        appointmentsByClinicianMap.set(appt.clinicianName, []);
      }
      appointmentsByClinicianMap.get(appt.clinicianName)?.push(appt);
    });
    
    // Convert to array with last name for sorting
    const clinicianGroups = Array.from(appointmentsByClinicianMap.entries())
      .map(([clinicianName, appointments]) => {
        // Extract last name for sorting (assumes format "First Last")
        const nameParts = clinicianName.split(' ');
        const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : clinicianName;
        
        return {
          clinicianName,
          appointments: appointments.sort((a, b) => 
            new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
          ),
          lastName
        };
      });
    
    // Sort by last name
    return clinicianGroups.sort((a, b) => a.lastName.localeCompare(b.lastName));
  }
  
  /**
   * Render clinician groups with their appointments
   */
  private static renderClinicianGroups(
    clinicianGroups: { clinicianName: string; appointments: ProcessedAppointment[]; lastName: string }[],
    data: DailyScheduleData
  ): string {
    if (clinicianGroups.length === 0) {
      return '<p>No appointments scheduled for today.</p>';
    }
    
    return clinicianGroups.map(group => {
      // Get conflicts for this clinician
      const clinicianConflicts = data.conflictsByClinicianMap?.[group.clinicianName] || [];
      
      return `
        <div class="clinician-section">
          <div class="clinician-name">${group.clinicianName}</div>
          
          ${clinicianConflicts.length > 0 ? this.renderClinicianConflicts(clinicianConflicts) : ''}
          
          <table>
            <thead>
              <tr>
                <th>Time</th>
                <th>Client</th>
                <th>Office</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              ${group.appointments.map(appt => this.renderAppointmentRow(appt)).join('')}
            </tbody>
          </table>
        </div>
      `;
    }).join('');
  }
  
  /**
   * Render conflicts specific to a clinician
   */
  private static renderClinicianConflicts(conflicts: ScheduleConflict[]): string {
    return `
      <div class="clinician-conflicts">
        <strong>‚ö†Ô∏è Scheduling Notes:</strong>
        <ul>
          ${conflicts.map(conflict => `
            <li class="${conflict.severity}">
              ${conflict.description}
              ${conflict.resolutionSuggestion ? `<br><em>${conflict.resolutionSuggestion}</em>` : ''}
            </li>
          `).join('')}
        </ul>
      </div>
    `;
  }
  
  /**
   * Generate HTML for an appointment row with enhanced office information
   */
  private static renderAppointmentRow(appt: ProcessedAppointment): string {
    // Display special requirements if any
    const requirementsHtml = appt.hasSpecialRequirements 
      ? `<div class="special-requirements">
           ${appt.requirements?.accessibility ? '<div>‚ôø Accessibility needed</div>' : ''}
           ${appt.requirements?.specialFeatures?.length 
             ? `<div>üîç Special features: ${appt.requirements.specialFeatures.join(', ')}</div>` 
             : ''}
           ${appt.notes ? `<div>üìù ${appt.notes}</div>` : ''}
         </div>`
      : '';
    
    // Handle office change highlighting
    const officeChangeHtml = appt.requiresOfficeChange 
      ? `<div class="office-change-note">
           ‚ö†Ô∏è <span class="office-change">Office change required</span> from ${appt.previousOffice}
         </div>`
      : '';
    
    // Display assignment reason if available
    const assignmentReasonHtml = appt.assignmentReason
      ? `<div class="assignment-reason">
           ‚ÑπÔ∏è ${appt.assignmentReason}
         </div>`
      : '';
    
    // Add office-change class to the office cell if needed
    const officeClass = appt.requiresOfficeChange ? ' class="office-change"' : '';
    
    // Add special class for telehealth sessions
    const sessionTypeClass = appt.sessionType === 'telehealth' ? ' class="telehealth"' : '';
    
    return `
      <tr>
        <td>${appt.formattedTime}</td>
        <td>${appt.clientName}${requirementsHtml}</td>
        <td${officeClass}>${appt.officeDisplay}${officeChangeHtml}${assignmentReasonHtml}</td>
        <td${sessionTypeClass}>${this.formatSessionType(appt.sessionType)}</td>
      </tr>
    `;
  }
  
  /**
   * Format session type for display
   */
  private static formatSessionType(type: string): string {
    switch (type) {
      case 'in-person':
        return 'In-Person';
      case 'telehealth':
        return 'Telehealth';
      case 'group':
        return 'Group Therapy';
      case 'family':
        return 'Family Session';
      default:
        return type.charAt(0).toUpperCase() + type.slice(1);
    }
  }
  
  /**
   * Generate a plain text version of the email for clients without HTML
   */
  private static generateTextVersion(
    data: DailyScheduleData,
    clinicianGroups: { clinicianName: string; appointments: ProcessedAppointment[]; lastName: string }[]
  ): string {
    const { displayDate, conflicts, stats } = data;
    
    let text = `DAILY SCHEDULE: ${displayDate}\n\n`;
    
    // Appointments section
    text += `APPOINTMENTS\n\n`;
    
    clinicianGroups.forEach(group => {
      text += `${group.clinicianName}\n`;
      text += `${'-'.repeat(group.clinicianName.length)}\n`;
      
      // Add clinician-specific conflicts
      const clinicianConflicts = data.conflictsByClinicianMap?.[group.clinicianName] || [];
      if (clinicianConflicts.length > 0) {
        text += `\nScheduling Notes:\n`;
        clinicianConflicts.forEach(conflict => {
          text += `* ${conflict.description}\n`;
          if (conflict.resolutionSuggestion) {
            text += `  - ${conflict.resolutionSuggestion}\n`;
          }
        });
        text += `\n`;
      }
      
      text += `Time | Client | Office | Type\n`;
      text += `${'-'.repeat(60)}\n`;
      
      group.appointments.forEach(appt => {
        let appText = `${appt.formattedTime} | ${appt.clientName} | ${appt.officeDisplay}`;
        
        if (appt.requiresOfficeChange) {
          appText += ` (OFFICE CHANGE from ${appt.previousOffice})`;
        }
        
        appText += ` | ${this.formatSessionType(appt.sessionType)}\n`;
        
        if (appt.assignmentReason) {
          appText += `  * Office assignment: ${appt.assignmentReason}\n`;
        }
        
        if (appt.hasSpecialRequirements) {
          if (appt.requirements?.accessibility) {
            appText += `  * Accessibility needed\n`;
          }
          if (appt.requirements?.specialFeatures?.length) {
            appText += `  * Special features: ${appt.requirements.specialFeatures.join(', ')}\n`;
          }
          if (appt.notes) {
            appText += `  * Notes: ${appt.notes}\n`;
          }
        }
        
        text += appText;
      });
      
      text += `\n`;
    });
    
    // Summary section
    text += `SCHEDULE OVERVIEW\n\n`;
    text += `Summary\n`;
    text += `Total appointments: ${stats.totalAppointments}\n`;
    text += `In-person sessions: ${stats.inPersonCount}\n`;
    text += `Telehealth sessions: ${stats.telehealthCount}\n`;
    text += `Group sessions: ${stats.groupCount}\n`;
    text += `Family sessions: ${stats.familyCount}\n\n`;
    
    // Office utilization
    text += `Office Utilization\n`;
    Object.entries(stats.officeUtilization).forEach(([officeId, count]) => {
      text += `Office ${officeId}: ${count} appointment(s)\n`;
    });
    text += `\n`;
    
    // Footer
    text += `\nThis report was automatically generated by Catalyst Scheduler on ${new Date().toLocaleString()}\n`;
    text += `For questions or issues, please contact your administrator.\n`;
    
    return text;
  }
  
  /**
   * Generate error notification email
   */
  static errorNotification(
    errorOrMessage: Error | string,
    context: string,
    details?: any
  ): EmailTemplate {
    const error = errorOrMessage instanceof Error ? errorOrMessage : new Error(errorOrMessage);
    
    const htmlBody = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { 
      font-family: Arial, sans-serif; 
      line-height: 1.5;
      color: #333;
    }
    .header { 
      background-color: #e74c3c; 
      color: white; 
      padding: 20px;
      border-radius: 5px 5px 0 0;
    }
    .content { 
      padding: 20px; 
      background-color: #f9f9f9;
    }
    .code {
      font-family: monospace;
      background-color: #f5f5f5;
      padding: 15px;
      border-radius: 4px;
      overflow-x: auto;
    }
    .footer { 
      font-size: 12px; 
      color: #666; 
      padding: 20px; 
      text-align: center;
      border-top: 1px solid #ddd;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Catalyst Scheduler Error Alert</h1>
  </div>
  <div class="content">
    <h2>An error occurred during: ${context}</h2>
    <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
    <p><strong>Error:</strong> ${error.message}</p>
    
    <h3>Error Details</h3>
    <div class="code">
      ${error.stack ? error.stack.replace(/\n/g, '<br>') : 'No stack trace available'}
    </div>
    
    ${details ? `
      <h3>Additional Context</h3>
      <div class="code">
        ${JSON.stringify(details, null, 2).replace(/\n/g, '<br>')}
      </div>
    ` : ''}
    
    <p>This error may require attention to ensure proper system operation.</p>
  </div>
  <div class="footer">
    <p>This is an automated message from Catalyst Scheduler</p>
  </div>
</body>
</html>
    `;
    
    const textBody = `
CATALYST SCHEDULER ERROR ALERT

An error occurred during: ${context}
Timestamp: ${new Date().toLocaleString()}
Error: ${error.message}

Error Details:
${error.stack || 'No stack trace available'}

${details ? `Additional Context:
${JSON.stringify(details, null, 2)}` : ''}

This error may require attention to ensure proper system operation.

This is an automated message from Catalyst Scheduler
    `;
    
    return {
      subject: `Error Alert: Catalyst Scheduler - ${context}`,
      htmlBody,
      textBody
    };
  }
}