/**
 * Catalyst Scheduler - Active Appointments Google Apps Script
 * 
 * This script manages the Active_Appointments sheet in the Catalyst Scheduler Google Sheet.
 * It includes functionality for:
 * 1. Daily refreshing of the Active_Appointments tab (5:45 AM)
 * 2. Cleanup of duplicate appointments
 * 3. On-edit trigger to keep Active_Appointments in sync
 * 4. Custom menu for manual operations
 */

function setupDailyTrigger() {
  // Delete any existing triggers to avoid duplicates
  const triggers = ScriptApp.getProjectTriggers();
  for (const trigger of triggers) {
    if (trigger.getHandlerFunction() === 'refreshActiveAppointments') {
      ScriptApp.deleteTrigger(trigger);
    }
  }
  
  ScriptApp.newTrigger('refreshActiveAppointments')
    .timeBased()
    .atHour(5)  // 5 AM
    .nearMinute(45)  // at :45 minutes
    .everyDays(1)
    .inTimezone("America/New_York")  // Explicitly set EST/EDT timezone
    .create();
    
  Logger.log('Daily trigger for refreshActiveAppointments has been set up');
}

/**
 * Refreshes the Active_Appointments tab with today's appointments
 * This runs automatically at 5:45 AM and can be run manually as needed
 * Simplified version that avoids unnecessary date manipulation
 */
function refreshActiveAppointments() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Get the Appointments sheet
  const appointmentsSheet = ss.getSheetByName('Appointments');
  if (!appointmentsSheet) {
    Logger.log('Error: Appointments sheet not found');
    return;
  }
  
  // Get or create the Active_Appointments sheet
  let activeSheet = ss.getSheetByName('Active_Appointments');
  if (!activeSheet) {
    Logger.log('Creating new Active_Appointments sheet');
    activeSheet = ss.insertSheet('Active_Appointments');
  }
  
  // Get all data from Appointments sheet
  const data = appointmentsSheet.getDataRange().getValues();
  const headers = data[0];
  
  // Copy headers to Active_Appointments
  activeSheet.clear();
  activeSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // Find column indices
  const startTimeCol = headers.indexOf('startTime');
  const statusCol = headers.indexOf('status');
  
  if (startTimeCol === -1 || statusCol === -1) {
    Logger.log('Error: Required columns not found in Appointments sheet');
    return;
  }
  
  // Get today's date (in EST/EDT timezone)
  const today = new Date();
  const timeZone = ss.getSpreadsheetTimeZone() || 'America/New_York';
  const todayStr = Utilities.formatDate(today, timeZone, 'yyyy-MM-dd');
  
  Logger.log(`Refreshing Active_Appointments for ${todayStr}`);
  
  // Filter for today's appointments that aren't cancelled or rescheduled
  const todayAppointments = data.slice(1).filter(row => {
    if (!row[startTimeCol]) return false;
    
    let startTime = row[startTimeCol];
    let startDateStr = '';
    
    // Get the date part without manipulating format - just check for today's date
    if (typeof startTime === 'string') {
      startDateStr = startTime.split('T')[0].split(' ')[0];
    } else if (startTime instanceof Date) {
      startDateStr = Utilities.formatDate(startTime, timeZone, 'yyyy-MM-dd');
    } else {
      return false;
    }
    
    // Check status - exclude cancelled and rescheduled
    const status = row[statusCol];
    const validStatus = status !== 'cancelled' &&
      status !== 'rescheduled' &&
      status !== 'deleted';
    
    return startDateStr === todayStr && validStatus;
  });
  
  // Add today's appointments to Active_Appointments
  if (todayAppointments.length > 0) {
    activeSheet.getRange(2, 1, todayAppointments.length, headers.length)
      .setValues(todayAppointments);
    
    // Set formatting to match Appointments sheet
    try {
      const sourceFormat = appointmentsSheet.getRange(1, 1, 1, headers.length);
      const targetFormat = activeSheet.getRange(1, 1, 1, headers.length);
      sourceFormat.copyFormatToRange(activeSheet, 1, headers.length, 1, 1);
    } catch (e) {
      Logger.log('Warning: Could not copy formatting - ' + e.toString());
    }
  }
  
  // Add timestamp and count
  activeSheet.getRange(1, headers.length + 2).setValue('Last Updated:');
  activeSheet.getRange(1, headers.length + 3).setValue(new Date());
  activeSheet.getRange(2, headers.length + 2).setValue('Appointment Count:');
  activeSheet.getRange(2, headers.length + 3).setValue(todayAppointments.length);
  
  // Run duplicate cleanup after refresh to ensure we have clean data
  cleanupDuplicates();
  
  Logger.log(`Refreshed Active_Appointments with ${todayAppointments.length} appointments for today (${todayStr})`);
}

/**
 * Updates Active_Appointments when the Appointments sheet is edited
 * This keeps the Active_Appointments tab in sync throughout the day
 * Also checks for and removes duplicate appointments
 */
function onEdit(e) {
  // Only run if the edit was on the Appointments sheet
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() !== 'Appointments') return;
  
  // Check if we need to update
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  const startTimeCol = headers.indexOf('startTime') + 1; // 1-indexed
  const statusCol = headers.indexOf('status') + 1; // 1-indexed
  const appointmentIdCol = headers.indexOf('appointmentId') + 1; // 1-indexed
  const lastUpdatedCol = headers.indexOf('lastUpdated') + 1; // 1-indexed
  
  // Only run if the edited cell is in a relevant column or if we don't know the edited range
  if (e.range && 
      (e.range.getColumn() === startTimeCol || 
       e.range.getColumn() === statusCol || 
       e.range.getColumn() === 0)) { // 0 means we don't know
    
    Logger.log('Relevant edit detected in Appointments sheet, refreshing Active_Appointments');
    
    // First clean up duplicates in Active_Appointments sheet
    cleanupDuplicates();
    
    // Then refresh the Active_Appointments tab
    refreshActiveAppointments();
  }
}

/**
 * Find and remove duplicate appointments from the Active_Appointments sheet
 * This identifies appointments with the same appointmentId and keeps only the most recently updated one
 * Can be run manually from the menu or automatically via triggers
 */
function cleanupDuplicates() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Active_Appointments');
  
  if (!sheet) {
    Logger.log('Error: Active_Appointments sheet not found');
    return;
  }
  
  // Get all data from Active_Appointments sheet
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  // Get column indices
  const appointmentIdCol = headers.indexOf('appointmentId');
  const lastUpdatedCol = headers.indexOf('lastUpdated');
  
  if (appointmentIdCol === -1) {
    Logger.log('Error: appointmentId column not found');
    return;
  }
  
  // Group appointments by appointmentId
  const appointmentGroups = {};
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const appointmentId = row[appointmentIdCol];
    
    if (!appointmentId) continue;
    
    if (!appointmentGroups[appointmentId]) {
      appointmentGroups[appointmentId] = [];
    }
    
    appointmentGroups[appointmentId].push({
      rowIndex: i + 1, // 1-indexed for sheet operations
      lastUpdated: row[lastUpdatedCol],
      data: row
    });
  }
  
  // Find duplicates and keep only the most recent version
  let duplicatesFound = 0;
  const rowsToDelete = [];
  
  for (const appointmentId in appointmentGroups) {
    const group = appointmentGroups[appointmentId];
    
    if (group.length > 1) {
      duplicatesFound++;
      Logger.log(`Found ${group.length} duplicates for appointment ${appointmentId}`);
      
      // Sort by lastUpdated (descending)
      group.sort((a, b) => {
        if (!a.lastUpdated) return 1;
        if (!b.lastUpdated) return -1;
        return new Date(b.lastUpdated) - new Date(a.lastUpdated);
      });
      
      // Mark all but the most recent for deletion
      for (let i = 1; i < group.length; i++) {
        rowsToDelete.push(group[i].rowIndex);
      }
    }
  }
  
  // Delete duplicate rows in reverse order to maintain correct indices
  if (rowsToDelete.length > 0) {
    rowsToDelete.sort((a, b) => b - a); // Sort descending
    
    for (const rowIndex of rowsToDelete) {
      sheet.deleteRow(rowIndex);
      Logger.log(`Deleted duplicate at row ${rowIndex}`);
    }
    
    Logger.log(`Removed ${rowsToDelete.length} duplicate appointments`);
    
    // Update the appointment count
    const countCell = sheet.getRange(2, headers.length + 3);
    const currentCount = countCell.getValue();
    if (typeof currentCount === 'number') {
      countCell.setValue(currentCount - rowsToDelete.length);
    }
  } else {
    Logger.log('No duplicates found in Active_Appointments');
  }
  
  return {
    duplicatesFound: duplicatesFound,
    duplicatesRemoved: rowsToDelete.length
  };
}

/**
 * Creates a custom menu for manual operations
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Scheduler Tools')
    .addItem('Refresh Active Appointments', 'refreshActiveAppointments')
    .addItem('Clean Up Duplicates', 'cleanupDuplicates')
    .addItem('Setup Daily Refresh', 'setupDailyTrigger')
    .addToUi();
}

/**
 * Additional function to clean up the main Appointments sheet
 * This is separate from the Active_Appointments cleanup
 */
function cleanupAppointmentsSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Appointments');
  
  if (!sheet) {
    Logger.log('Error: Appointments sheet not found');
    return;
  }
  
  // Get all data from Appointments sheet
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  // Get column indices
  const appointmentIdCol = headers.indexOf('appointmentId');
  const lastUpdatedCol = headers.indexOf('lastUpdated');
  
  if (appointmentIdCol === -1) {
    Logger.log('Error: appointmentId column not found');
    return;
  }
  
  // Group appointments by appointmentId
  const appointmentGroups = {};
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const appointmentId = row[appointmentIdCol];
    
    if (!appointmentId) continue;
    
    if (!appointmentGroups[appointmentId]) {
      appointmentGroups[appointmentId] = [];
    }
    
    appointmentGroups[appointmentId].push({
      rowIndex: i + 1, // 1-indexed for sheet operations
      lastUpdated: row[lastUpdatedCol],
      data: row
    });
  }
  
  // Find duplicates and keep only the most recent version
  let duplicatesFound = 0;
  const rowsToDelete = [];
  
  for (const appointmentId in appointmentGroups) {
    const group = appointmentGroups[appointmentId];
    
    if (group.length > 1) {
      duplicatesFound++;
      Logger.log(`Found ${group.length} duplicates for appointment ${appointmentId} in Appointments sheet`);
      
      // Sort by lastUpdated (descending)
      group.sort((a, b) => {
        if (!a.lastUpdated) return 1;
        if (!b.lastUpdated) return -1;
        return new Date(b.lastUpdated) - new Date(a.lastUpdated);
      });
      
      // Mark all but the most recent for deletion
      for (let i = 1; i < group.length; i++) {
        rowsToDelete.push(group[i].rowIndex);
      }
    }
  }
  
  // Delete duplicate rows in reverse order to maintain correct indices
  if (rowsToDelete.length > 0) {
    rowsToDelete.sort((a, b) => b - a); // Sort descending
    
    for (const rowIndex of rowsToDelete) {
      sheet.deleteRow(rowIndex);
      Logger.log(`Deleted duplicate at row ${rowIndex} in Appointments sheet`);
    }
    
    Logger.log(`Removed ${rowsToDelete.length} duplicate appointments from Appointments sheet`);
  } else {
    Logger.log('No duplicates found in Appointments sheet');
  }
  
  return {
    duplicatesFound: duplicatesFound,
    duplicatesRemoved: rowsToDelete.length
  };
}

/**
 * Update the menu to include both cleanup options
 */
function updateMenuWithAllOptions() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Scheduler Tools')
    .addItem('Refresh Active Appointments', 'refreshActiveAppointments')
    .addItem('Clean Up Active Appointments Duplicates', 'cleanupDuplicates')
    .addItem('Clean Up Main Appointments Sheet', 'cleanupAppointmentsSheet')
    .addItem('Clean Up Both Sheets', 'cleanupBothSheets')
    .addItem('Setup Daily Refresh', 'setupDailyTrigger')
    .addSeparator()
    .addSubMenu(ui.createMenu('Testing Tools')
      .addItem('Test Morning Sequence', 'testMorningSequence')
      .addItem('Test Duplicate Edit Handling', 'testDuplicateEdits')
      .addItem('Debug Functions', 'debugTriggers')
    )
    .addToUi();
}

/**
 * Debug function to show all active triggers
 */
function debugTriggers() {
  const ui = SpreadsheetApp.getUi();
  
  // Get all triggers
  const triggers = ScriptApp.getProjectTriggers();
  
  if (triggers.length === 0) {
    ui.alert('No Triggers', 'There are currently no triggers set up.', ui.ButtonSet.OK);
    return;
  }
  
  // Format trigger information
  let triggerInfo = 'Currently active triggers:\n\n';
  
  triggers.forEach((trigger, index) => {
    triggerInfo += `${index + 1}. Function: ${trigger.getHandlerFunction()}\n`;
    
    // Get trigger type
    const eventType = trigger.getEventType();
    triggerInfo += `   Type: ${eventType}\n`;
    
    // Get timing info for time-based triggers
    if (eventType === ScriptApp.EventType.CLOCK) {
      const timezone = Session.getScriptTimeZone();
      const atHour = trigger.getAtHour();
      const nearMinute = trigger.getNearMinute();
      
      triggerInfo += `   Time: ${atHour}:${nearMinute < 10 ? '0' + nearMinute : nearMinute} (${timezone})\n`;
      
      if (trigger.getTotalFailures() > 0) {
        triggerInfo += `   Failures: ${trigger.getTotalFailures()}\n`;
      }
    }
    
    triggerInfo += '\n';
  });
  
  // Show trigger information
  ui.alert('Trigger Information', triggerInfo, ui.ButtonSet.OK);
}

/**
 * Helper function to clean up duplicates in both sheets
 */
function cleanupBothSheets() {
  const activeResult = cleanupDuplicates();
  const mainResult = cleanupAppointmentsSheet();
  
  // Refresh Active_Appointments after cleaning up both sheets
  refreshActiveAppointments();
  
  return {
    activeSheet: activeResult,
    mainSheet: mainResult
  };
}

/**
 * Run this function to update the menu and setup triggers
 */
function initialize() {
  setupDailyTrigger();
  updateMenuWithAllOptions();
  Logger.log('Catalyst Scheduler script initialized');
}

/**
 * Simulates the early morning task sequence for testing
 * This function runs all the tasks in the order they would normally run:
 * 1. Office assignment (5:30 AM)
 * 2. Refresh Active_Appointments (5:45 AM)
 * 3. Daily report tasks (6:00 AM)
 * 4. Duplicate cleanup (6:15 AM)
 * 
 * Use this function to manually test the workflow without waiting for scheduled times
 */
function testMorningSequence() {
  const ui = SpreadsheetApp.getUi();
  
  // Create a log sheet or clear it if it exists
  let logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Test Logs');
  if (!logSheet) {
    logSheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet('Test Logs');
    logSheet.appendRow(['Timestamp', 'Action', 'Details']);
  } else {
    // Clear existing logs but keep the header
    const lastRow = logSheet.getLastRow();
    if (lastRow > 1) {
      logSheet.deleteRows(2, lastRow - 1);
    }
  }
  
  // Log function to both console and sheet
  function logAction(action, details) {
    Logger.log(`TEST: ${action} - ${details}`);
    logSheet.appendRow([new Date(), action, details]);
  }
  
  try {
    // Step 1: Simulate creating a duplicate appointment for testing
    logAction('SETUP', 'Creating test duplicate in Active_Appointments');
    const activeSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Active_Appointments');
    if (activeSheet) {
      // Get an existing row to duplicate
      const data = activeSheet.getDataRange().getValues();
      if (data.length > 1) {
        const rowToDuplicate = data[1]; // Use the first appointment
        activeSheet.appendRow(rowToDuplicate); // Create duplicate
        logAction('SETUP', `Created test duplicate for appointment ID: ${rowToDuplicate[0]}`);
      }
    }
    
    // Step 2: Simulate office assignment (5:30 AM)
    logAction('STEP 1', 'Simulating office assignment task (5:30 AM)');
    // Note: We can't directly run the backend task, but we can check appointment statuses
    
    // Step 3: Refresh Active_Appointments (5:45 AM)
    logAction('STEP 2', 'Simulating Active_Appointments refresh (5:45 AM)');
    refreshActiveAppointments();
    
    // Step 4: Simulate Daily Report (6:00 AM)
    logAction('STEP 3', 'Simulating daily report generation (6:00 AM)');
    // This is handled by the backend
    
    // Step 5: Run duplicate cleanup (6:15 AM)
    logAction('STEP 4', 'Simulating duplicate cleanup task (6:15 AM)');
    const duplicateResults = cleanupBothSheets();
    
    // Log results
    logAction('RESULTS', `Duplicates found in Active sheet: ${duplicateResults.activeSheet?.duplicatesFound || 0}`);
    logAction('RESULTS', `Duplicates removed from Active sheet: ${duplicateResults.activeSheet?.duplicatesRemoved || 0}`);
    logAction('RESULTS', `Duplicates found in main Appointments: ${duplicateResults.mainSheet?.duplicatesFound || 0}`);
    logAction('RESULTS', `Duplicates removed from main Appointments: ${duplicateResults.mainSheet?.duplicatesRemoved || 0}`);
    
    // Show test completion message
    logAction('COMPLETE', 'Morning sequence simulation completed');
    ui.alert('Test Completed', 
             `Morning sequence simulation completed. Please check the Test Logs sheet for details.\n\n` +
             `Active_Appointments duplicates found: ${duplicateResults.activeSheet?.duplicatesFound || 0}\n` +
             `Active_Appointments duplicates removed: ${duplicateResults.activeSheet?.duplicatesRemoved || 0}\n` +
             `Main Appointments duplicates found: ${duplicateResults.mainSheet?.duplicatesFound || 0}\n` + 
             `Main Appointments duplicates removed: ${duplicateResults.mainSheet?.duplicatesRemoved || 0}`,
             ui.ButtonSet.OK);
  } catch (e) {
    logAction('ERROR', e.toString());
    ui.alert('Test Error', 'An error occurred during testing. Check the Test Logs sheet for details.', ui.ButtonSet.OK);
  }
}

/**
 * Simulates a series of edits that would typically create duplicates
 * This function:
 * 1. Creates a duplicate in the Appointments sheet
 * 2. Triggers the onEdit function (manually since we can't simulate actual sheet edits)
 * 3. Verifies that duplicates were cleaned up
 */
function testDuplicateEdits() {
  const ui = SpreadsheetApp.getUi();
  
  // Create a log sheet or clear it if it exists
  let logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Test Logs');
  if (!logSheet) {
    logSheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet('Test Logs');
    logSheet.appendRow(['Timestamp', 'Action', 'Details']);
  } else {
    // Clear existing logs but keep the header
    const lastRow = logSheet.getLastRow();
    if (lastRow > 1) {
      logSheet.deleteRows(2, lastRow - 1);
    }
  }
  
  // Log function to both console and sheet
  function logAction(action, details) {
    Logger.log(`TEST: ${action} - ${details}`);
    logSheet.appendRow([new Date(), action, details]);
  }
  
  try {
    // Step 1: Make sure we have clean sheets to start with
    logAction('SETUP', 'Initial cleanup to start with clean state');
    cleanupBothSheets();
    
    // Step 2: Get the Appointments sheet
    const mainSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Appointments');
    if (!mainSheet) {
      logAction('ERROR', 'Could not find Appointments sheet');
      ui.alert('Test Error', 'Could not find Appointments sheet', ui.ButtonSet.OK);
      return;
    }
    
    // Step 3: Create a duplicate in the Appointments sheet
    const data = mainSheet.getDataRange().getValues();
    if (data.length <= 1) {
      logAction('ERROR', 'No appointments found to duplicate');
      ui.alert('Test Error', 'No appointments found to duplicate', ui.ButtonSet.OK);
      return;
    }
    
    // Find a row to duplicate (preferably today's appointment)
    let rowToDuplicate = null;
    const headers = data[0];
    const startTimeCol = headers.indexOf('startTime');
    const today = new Date();
    const todayStr = Utilities.formatDate(today, 'America/New_York', 'yyyy-MM-dd');
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[startTimeCol] && row[startTimeCol].toString().includes(todayStr)) {
        rowToDuplicate = row;
        break;
      }
    }
    
    if (!rowToDuplicate) {
      // If no today's appointment, just use the first one
      rowToDuplicate = data[1];
    }
    
    // Create a duplicate by appending the row
    mainSheet.appendRow(rowToDuplicate);
    const duplicatedId = rowToDuplicate[headers.indexOf('appointmentId')];
    logAction('SETUP', `Created test duplicate for appointment ID: ${duplicatedId}`);
    
    // Step 4: Create a mock edit event
    const mockEvent = {
      source: SpreadsheetApp.getActiveSpreadsheet(),
      range: mainSheet.getRange(mainSheet.getLastRow(), 1),
      user: Session.getActiveUser().getEmail()
    };
    
    // Step 5: Manually run onEdit function with our mock event
    logAction('TEST', 'Running onEdit function with mock event');
    onEdit(mockEvent);
    
    // Step 6: Check results
    logAction('VERIFY', 'Checking for duplicates after onEdit');
    const afterTestResults = cleanupBothSheets();
    
    // Log results and show alert
    const message = `Edit test completed. Changes should have triggered duplicate cleanup.\n\n` +
                    `Additional duplicates found in Active_Appointments: ${afterTestResults.activeSheet?.duplicatesFound || 0}\n` +
                    `Additional duplicates found in main Appointments: ${afterTestResults.mainSheet?.duplicatesFound || 0}\n\n` +
                    `If these numbers are 0, it means the automatic cleanup worked correctly.`;
    
    logAction('COMPLETE', message);
    ui.alert('Test Completed', message, ui.ButtonSet.OK);
    
  } catch (e) {
    logAction('ERROR', e.toString());
    ui.alert('Test Error', 'An error occurred during testing. Check the Test Logs sheet for details.', ui.ButtonSet.OK);
  }
}