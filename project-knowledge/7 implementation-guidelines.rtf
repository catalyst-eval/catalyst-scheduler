{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid16}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Catalyst Scheduler Implementation Guidelines\
\pard\pardeftab720\sa298\partightenfactor0

\fs36 \cf0 Core System Architecture\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The Catalyst Scheduler is organized into these key components:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 src/\
\uc0\u9500 \u9472 \u9472  lib/                # Core library code\
\uc0\u9474    \u9500 \u9472 \u9472  google/         # Google Sheets integration\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  sheets.ts   # Main Sheets service \
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  sheets-cache.ts # Caching layer\
\uc0\u9474    \u9500 \u9472 \u9472  intakeq/        # IntakeQ integration\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  service.ts  # API client\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  webhook-handler.ts # Webhook processing\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  appointment-sync.ts # Appointment logic\
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  accessibility-scanner.ts # Client info processing\
\uc0\u9474    \u9500 \u9472 \u9472  scheduling/     # Scheduling logic\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  daily-schedule-service.ts # Daily scheduling\
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  scheduler-service.ts # Scheduled tasks\
\uc0\u9474    \u9500 \u9472 \u9472  email/          # Email generation\
\uc0\u9474    \u9474    \u9500 \u9472 \u9472  service.ts  # Email delivery\
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  templates.ts # Email templates\
\uc0\u9474    \u9492 \u9472 \u9472  util/           # Utility functions\
\uc0\u9474        \u9500 \u9472 \u9472  date-utils.ts # Date manipulation\
\uc0\u9474        \u9500 \u9472 \u9472  office-id.ts    # Office ID handling\
\uc0\u9474        \u9500 \u9472 \u9472  error-recovery.ts # Recovery service\
\uc0\u9474        \u9500 \u9472 \u9472  service-initializer.ts # Service initialization\
\uc0\u9474        \u9492 \u9472 \u9472  logger.ts         # Structured logging\
\uc0\u9500 \u9472 \u9472  routes/             # API routes\
\uc0\u9474    \u9500 \u9472 \u9472  webhooks/       # Webhook endpoints\
\uc0\u9474    \u9500 \u9472 \u9472  scheduling/     # Scheduling endpoints \
\uc0\u9474    \u9492 \u9472 \u9472  maintenance/    # Maintenance endpoints\
\uc0\u9500 \u9472 \u9472  middleware/         # Express middleware\
\uc0\u9500 \u9472 \u9472  types/              # TypeScript type definitions\
\uc0\u9492 \u9472 \u9472  server.ts           # Main server entry point\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Implementation Principles\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 When implementing features or fixes, follow these general principles:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Separation of Concerns
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Keep business logic in service classes\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use routes only for HTTP request/response handling\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement complex logic in appropriate service modules\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Asynchronous Processing
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Handle webhooks asynchronously\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Provide immediate responses to external systems\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use proper Promise handling with async/await\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Error Handling
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement structured error handling throughout\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Log errors with appropriate context\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use try/catch blocks consistently\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Idempotent Operations
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Design operations to be safely repeatable\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Check for existing data before creating new records\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use appropriate identifiers for deduplication\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Google Sheets API Optimization
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement batching for multiple operations\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use caching for frequently accessed data\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Add retry logic with exponential backoff for rate limits\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Webhook-Driven Implementation Guide\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The system uses a webhook-driven approach for real-time updates. When implementing webhook processing:\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Webhook Reception\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Quick Acknowledgment
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Respond with 200 OK immediately after signature verification\
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Don't wait for processing to complete before responding\
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In routes/webhooks/intakeq.ts\
export async function processIntakeQWebhook(req: Request, res: Response) \{\
  try \{\
    const signature = req.headers['x-intakeq-signature'];\
    const payload = req.body;\
    \
    // Verify signature (can be done in middleware)\
    if (!signature || !validateSignature(payload, signature)) \{\
      return res.status(401).json(\{ success: false, error: 'Invalid signature' \});\
    \}\
    \
    // Respond immediately\
    res.status(200).json(\{ success: true \});\
    \
    // Process webhook asynchronously\
    processWebhookAsync(payload, signature)\
      .catch(err => console.error('Error processing webhook:', err));\
      \
  \} catch (error) \{\
    // If error occurs before response is sent\
    if (!res.headersSent) \{\
      res.status(500).json(\{ success: false, error: 'Internal server error' \});\
    \}\
    console.error('Webhook processing error:', error);\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Idempotent Processing\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Webhook Idempotency
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement tracking to prevent duplicate processing\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/intakeq/webhook-handler.ts\
\
// Generate a unique key for a webhook event\
private generateIdempotencyKey(payload: any): string \{\
  const eventType = payload.Type || 'unknown';\
  const entityId = payload.Appointment?.Id || payload.FormId || 'unknown';\
  const timestamp = new Date().toISOString().slice(0, 16); // Up to minutes precision\
  \
  return `$\{eventType\}:$\{entityId\}:$\{timestamp\}`;\
\}\
\
// Check if webhook was already processed\
private async isWebhookProcessed(key: string): Promise<boolean> \{\
  try \{\
    const recentWebhooks = await this.sheetsService.getRecentWebhooks();\
    return recentWebhooks.some(webhook => webhook.idempotencyKey === key);\
  \} catch (error) \{\
    // Log error but continue processing\
    console.error('Error checking webhook idempotency:', error);\
    return false;\
  \}\
\}\
\
// Log webhook processing\
private async logWebhookProcessing(key: string, status: string): Promise<void> \{\
  await this.sheetsService.logWebhook(\{\
    idempotencyKey: key,\
    timestamp: new Date().toISOString(),\
    status: status\
  \});\
\}\
\
// Main webhook processing with idempotency check\
async processWebhook(payload: any, signature?: string): Promise<WebhookResponse> \{\
  try \{\
    // Validate webhook format\
    this.validateWebhook(payload);\
    \
    // Generate idempotency key\
    const idempotencyKey = this.generateIdempotencyKey(payload);\
    \
    // Check if already processed\
    if (await this.isWebhookProcessed(idempotencyKey)) \{\
      console.log(`Webhook already processed: $\{idempotencyKey\}`);\
      return \{ success: true, message: 'Webhook already processed' \};\
    \}\
    \
    // Log webhook receipt\
    await this.logWebhookProcessing(idempotencyKey, 'processing');\
    \
    // Process the webhook\
    let result: WebhookResponse;\
    \
    if (payload.Type === 'FormSubmitted') \{\
      result = await this.processIntakeFormSubmission(payload);\
    \} else if (payload.Type && payload.Type.includes('Appointment') && payload.Appointment) \{\
      result = await this.appointmentSyncHandler.processAppointmentEvent(payload);\
    \} else \{\
      result = \{ success: false, error: `Unsupported webhook type: $\{payload.Type\}` \};\
    \}\
    \
    // Log final status\
    await this.logWebhookProcessing(idempotencyKey, result.success ? 'completed' : 'failed');\
    \
    return result;\
  \} catch (error) \{\
    // Handle errors\
    console.error('Error processing webhook:', error);\
    return \{ success: false, error: error.message \};\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Appointment Locking\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Appointment-Level Locking
\f1\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement a locking mechanism to prevent race conditions\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/intakeq/appointment-sync.ts\
\
// In-memory lock map\
private activeLocks = new Map<string, \{ timestamp: number, promise: Promise<void> \}>();\
\
// Execute function with appointment lock\
private async withLock<T>(appointmentId: string, operation: () => Promise<T>): Promise<T> \{\
  const lockKey = `appointment:$\{appointmentId\}`;\
  const lockTimeout = 30000; // 30 seconds\
  \
  // Check if there's an active lock\
  const existingLock = this.activeLocks.get(lockKey);\
  if (existingLock) \{\
    // If lock is too old, consider it stale\
    if (Date.now() - existingLock.timestamp > lockTimeout) \{\
      console.warn(`Stale lock found for $\{lockKey\}, releasing`);\
      this.activeLocks.delete(lockKey);\
    \} else \{\
      // Wait for existing operation to complete\
      console.log(`Waiting for lock on $\{lockKey\}`);\
      await existingLock.promise;\
    \}\
  \}\
  \
  // Create and acquire lock\
  let resolveLock: () => void;\
  const lockPromise = new Promise<void>(resolve => \{ resolveLock = resolve; \});\
  this.activeLocks.set(lockKey, \{\
    timestamp: Date.now(),\
    promise: lockPromise\
  \});\
  \
  try \{\
    // Execute operation with lock\
    return await operation();\
  \} finally \{\
    // Release lock\
    this.activeLocks.delete(lockKey);\
    resolveLock!();\
  \}\
\}\
\
// Use the lock in appointment processing\
async processAppointmentEvent(payload: IntakeQWebhookPayload): Promise<WebhookResponse> \{\
  const appointmentId = payload.Appointment?.Id;\
  if (!appointmentId) \{\
    return \{ success: false, error: 'Missing appointment ID' \};\
  \}\
  \
  return this.withLock(appointmentId, async () => \{\
    // Original method implementation\
    // ...\
  \});\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Google Sheets API Optimization\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 To efficiently handle Google Sheets API quotas, implement these patterns:\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 1. Batched Audit Logging\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // In lib/google/sheets.ts\
\
private pendingAuditLogs: AuditLogEntry[] = [];\
private auditLogTimer: NodeJS.Timeout | null = null;\
private readonly MAX_BATCH_SIZE = parseInt(process.env.MAX_AUDIT_LOG_BATCH_SIZE || '10');\
\
async addAuditLog(entry: AuditLogEntry): Promise<void> \{\
  // Add entry to pending logs\
  this.pendingAuditLogs.push(entry);\
  \
  // Process batch if enough entries or on timer\
  if (this.pendingAuditLogs.length >= this.MAX_BATCH_SIZE) \{\
    await this.flushAuditLogs();\
  \} else if (!this.auditLogTimer) \{\
    this.auditLogTimer = setTimeout(() => this.flushAuditLogs(), 5000);\
  \}\
\}\
\
async flushAuditLogs(): Promise<void> \{\
  if (this.pendingAuditLogs.length === 0) return;\
  \
  const logs = [...this.pendingAuditLogs];\
  this.pendingAuditLogs = [];\
  \
  if (this.auditLogTimer) \{\
    clearTimeout(this.auditLogTimer);\
    this.auditLogTimer = null;\
  \}\
  \
  try \{\
    console.log(`Flushing $\{logs.length\} audit log entries`);\
    \
    // Convert logs to rows and append in batch\
    await this.appendRows(\
      `$\{SHEET_NAMES.AUDIT_LOG\}!A:G`,\
      logs.map(log => this.auditLogToRow(log))\
    );\
  \} catch (error) \{\
    console.error('Error flushing audit logs:', error);\
    \
    // Put logs back in queue on failure\
    this.pendingAuditLogs = [...logs, ...this.pendingAuditLogs];\
    \
    // Rethrow\
    throw error;\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 2. Retry Logic with Exponential Backoff\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // In lib/google/sheets.ts\
\
async updateAppointment(appointment: AppointmentRecord, retryCount = 0): Promise<void> \{\
  const maxRetries = parseInt(process.env.GOOGLE_SHEETS_MAX_RETRIES || '5');\
  \
  try \{\
    // Attempt the update\
    await this.updateRow(\
      `$\{SHEET_NAMES.APPOINTMENTS\}!A:R`,\
      appointment.appointmentId,\
      this.appointmentToRow(appointment)\
    );\
    \
    // Update Active_Appointments if for today\
    if (this.isAppointmentForToday(appointment)) \{\
      await this.updateActiveAppointment(appointment);\
    \}\
    \
    // Refresh cache\
    await this.cache.refreshCache(`appointment:$\{appointment.appointmentId\}`);\
    \
  \} catch (error) \{\
    // Check if it's a rate limit error\
    const isRateLimit = error.message?.includes('RATE_LIMIT') || \
                        error.message?.includes('Quota exceeded');\
    \
    // Retry with exponential backoff for rate limit errors\
    if (isRateLimit && retryCount < maxRetries) \{\
      const delay = Math.pow(2, retryCount) * 1000;\
      console.warn(`Rate limit hit. Retrying in $\{delay\}ms (attempt $\{retryCount+1\}/$\{maxRetries\})`);\
      \
      await new Promise(resolve => setTimeout(resolve, delay));\
      return this.updateAppointment(appointment, retryCount + 1);\
    \}\
    \
    // Log the error\
    console.error(`Error updating appointment $\{appointment.appointmentId\}:`, error);\
    \
    // Rethrow for non-rate limit errors or after max retries\
    throw new SheetError(\
      `Failed to update appointment after $\{retryCount\} retries: $\{error.message\}`,\
      'UPDATE_FAILED',\
      retryCount < maxRetries\
    );\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 3. Memory Caching for Frequent Access\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs26 \cf0 // In lib/google/sheets-cache.ts\
\
export class SheetsCache \{\
  // In-memory cache\
  private memoryCache: Map<string, \{ data: any, expires: number \}> = new Map();\
  \
  // TTL defaults\
  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes\
  private readonly CONFIGURATION_TTL = 15 * 60 * 1000; // 15 minutes\
  \
  // Get data from cache or fetch it\
  async getOrFetch<T>(\
    key: string,\
    fetchFn: () => Promise<T>,\
    ttl = this.DEFAULT_TTL\
  ): Promise<T> \{\
    // Check memory cache first (fastest)\
    const cached = this.memoryCache.get(key);\
    if (cached && cached.expires > Date.now()) \{\
      return cached.data as T;\
    \}\
    \
    try \{\
      // Fetch new data\
      const data = await fetchFn();\
      \
      // Store in memory cache\
      this.memoryCache.set(key, \{\
        data,\
        expires: Date.now() + ttl\
      \});\
      \
      return data;\
    \} catch (error) \{\
      // If fetch fails but we have expired cache, use it as fallback\
      if (cached) \{\
        console.warn(`Using expired cache for $\{key\} due to fetch error`);\
        return cached.data as T;\
      \}\
      \
      // No cache available, rethrow\
      throw error;\
    \}\
  \}\
  \
  // Refresh cache for a specific key\
  async refreshCache(key: string): Promise<void> \{\
    this.memoryCache.delete(key);\
  \}\
  \
  // Preload common configuration data\
  async preloadCommonData(sheetsService: GoogleSheetsService): Promise<void> \{\
    console.log('Preloading common configuration data');\
    \
    try \{\
      // Load configuration data with longer TTL\
      await this.getOrFetch(\
        'offices',\
        () => sheetsService.getOffices(),\
        this.CONFIGURATION_TTL\
      );\
      \
      await this.getOrFetch(\
        'clinicians',\
        () => sheetsService.getClinicians(),\
        this.CONFIGURATION_TTL\
      );\
      \
      await this.getOrFetch(\
        'assignmentRules',\
        () => sheetsService.getAssignmentRules(),\
        this.CONFIGURATION_TTL\
      );\
      \
      await this.getOrFetch(\
        'clientAccessibility',\
        () => sheetsService.getClientAccessibilityInfo(),\
        this.CONFIGURATION_TTL\
      );\
      \
      console.log('Preloaded common configuration data');\
    \} catch (error) \{\
      console.error('Error preloading configuration data:', error);\
    \}\
  \}\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Active_Appointments Tab Management\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The system now relies on Apps Script for Active_Appointments management. Key implementation considerations:\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 1. Node.js Integration\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 When updating appointments through Node.js, ensure both tabs are updated:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/google/sheets.ts\
\
async updateActiveAppointment(appointment: AppointmentRecord): Promise<void> \{\
  try \{\
    // Check if the appointment is for today\
    if (!this.isAppointmentForToday(appointment)) \{\
      return;\
    \}\
    \
    // Get Active_Appointments sheet\
    const activeSheet = `$\{SHEET_NAMES.ACTIVE_APPOINTMENTS\}!A:R`;\
    \
    // Convert to row format\
    const appointmentRow = this.appointmentToRow(appointment);\
    \
    // Check if appointment exists in Active_Appointments\
    const existingIndex = await this.findRowIndex(activeSheet, appointment.appointmentId);\
    \
    if (existingIndex > 0) \{\
      // Update existing row\
      await this.sheets.spreadsheets.values.update(\{\
        spreadsheetId: this.spreadsheetId,\
        range: `$\{SHEET_NAMES.ACTIVE_APPOINTMENTS\}!A$\{existingIndex\}:R$\{existingIndex\}`,\
        valueInputOption: 'USER_ENTERED',\
        requestBody: \{ values: [appointmentRow] \}\
      \});\
    \} else if (appointment.status !== 'cancelled' && appointment.status !== 'deleted') \{\
      // Appointment is for today but not in Active_Appointments, add it\
      await this.appendRows(activeSheet, [appointmentRow]);\
    \}\
  \} catch (error) \{\
    console.error(`Error updating Active_Appointments for $\{appointment.appointmentId\}:`, error);\
    // Non-critical error, don't throw to prevent main operation failure\
  \}\
\}\
\
isAppointmentForToday(appointment: AppointmentRecord): boolean \{\
  try \{\
    const startDate = new Date(appointment.startTime);\
    const today = new Date();\
    \
    // Compare date parts only\
    return startDate.getFullYear() === today.getFullYear() &&\
           startDate.getMonth() === today.getMonth() &&\
           startDate.getDate() === today.getDate();\
  \} catch (error) \{\
    console.error('Error checking if appointment is for today:', error);\
    return false;\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 2. Relying on Apps Script for Cleanup\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The system no longer needs to maintain a rolling window of appointments. Apps Script handles cleanup:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // Apps Script (refreshActiveAppointments function) \
// handles cleaning past appointments from main Appointments tab\
\
// In lib/scheduling/scheduler-service.ts - removed code:\
// weeklyCleanupTask()\
// cleanupOldAppointments()\
// refreshTwoWeekWindow()\
\
// Daily task now simply focuses on schedule generation\
async combinedDailyTask(): Promise<boolean> \{\
  console.log('Running combined daily task');\
  \
  try \{\
    // Process any unassigned appointments\
    await this.processUnassignedAppointments();\
    \
    // Generate and send daily schedule\
    return await this.generateDailyScheduleOnDemand();\
  \} catch (error) \{\
    console.error('Error in combined daily task:', error);\
    return false;\
  \}\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Error Recovery Implementation\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Implement robust error recovery for failed operations:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/util/error-recovery.ts\
\
export class ErrorRecoveryService \{\
  private pendingRecovery: FailedOperation[] = [];\
  private readonly MAX_RECOVERY_ATTEMPTS = 5;\
  \
  constructor(\
    private sheetsService: GoogleSheetsService,\
    private intakeqService: IntakeQService\
  ) \{\}\
  \
  // Record a failed operation\
  async recordFailedOperation(\
    type: OperationType, \
    data: any, \
    error: Error\
  ): Promise<void> \{\
    const operation: FailedOperation = \{\
      id: uuidv4(),\
      type,\
      data: JSON.stringify(data),\
      error: error.message,\
      timestamp: new Date().toISOString(),\
      attempts: 0,\
      lastAttempt: null\
    \};\
    \
    this.pendingRecovery.push(operation);\
    \
    // Log to audit log\
    await this.sheetsService.addAuditLog(\{\
      timestamp: new Date().toISOString(),\
      eventType: 'OPERATION_FAILED',\
      description: `Failed operation: $\{type\}`,\
      user: 'error-recovery',\
      systemNotes: JSON.stringify(\{\
        operationId: operation.id,\
        error: error.message,\
        data: JSON.stringify(data).substring(0, 100) // Truncate for log\
      \})\
    \});\
  \}\
  \
  // Attempt to recover all pending operations\
  async attemptRecovery(): Promise<RecoveryResult> \{\
    if (this.pendingRecovery.length === 0) \{\
      return \{ recovered: 0, failed: 0 \};\
    \}\
    \
    console.log(`Attempting to recover $\{this.pendingRecovery.length\} operations`);\
    \
    const operations = [...this.pendingRecovery];\
    this.pendingRecovery = [];\
    \
    let recovered = 0;\
    let failed = 0;\
    \
    for (const operation of operations) \{\
      try \{\
        await this.processFailedOperation(operation);\
        recovered++;\
        \
        // Log success\
        await this.sheetsService.addAuditLog(\{\
          timestamp: new Date().toISOString(),\
          eventType: 'OPERATION_RECOVERED',\
          description: `Recovered operation: $\{operation.type\}`,\
          user: 'error-recovery',\
          systemNotes: JSON.stringify(\{\
            operationId: operation.id,\
            attempts: operation.attempts + 1\
          \})\
        \});\
      \} catch (error) \{\
        operation.attempts++;\
        operation.lastAttempt = new Date().toISOString();\
        operation.lastError = error.message;\
        \
        // Return to pending queue if under max attempts\
        if (operation.attempts < this.MAX_RECOVERY_ATTEMPTS) \{\
          this.pendingRecovery.push(operation);\
        \} else \{\
          // Log permanent failure\
          await this.sheetsService.addAuditLog(\{\
            timestamp: new Date().toISOString(),\
            eventType: 'OPERATION_RECOVERY_FAILED',\
            description: `Failed to recover operation after $\{operation.attempts\} attempts: $\{operation.type\}`,\
            user: 'error-recovery',\
            systemNotes: JSON.stringify(\{\
              operationId: operation.id,\
              finalError: error.message\
            \})\
          \});\
        \}\
        \
        failed++;\
      \}\
    \}\
    \
    return \{ recovered, failed \};\
  \}\
  \
  // Process a specific failed operation\
  private async processFailedOperation(operation: FailedOperation): Promise<void> \{\
    const data = JSON.parse(operation.data);\
    \
    switch (operation.type) \{\
      case 'ADD_APPOINTMENT':\
        await this.sheetsService.addAppointment(data);\
        break;\
        \
      case 'UPDATE_APPOINTMENT':\
        await this.sheetsService.updateAppointment(data);\
        break;\
        \
      case 'DELETE_APPOINTMENT':\
        await this.sheetsService.deleteAppointment(data.appointmentId);\
        break;\
        \
      // Add other operation types as needed\
        \
      default:\
        throw new Error(`Unknown operation type: $\{operation.type\}`);\
    \}\
  \}\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Email Template Implementation\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 The email template system includes enhanced features:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/email/templates.ts\
\
// Generate a deterministic color from a string\
private static getColorForString(str: string): string \{\
  // Simple hash function to generate a number from a string\
  let hash = 0;\
  for (let i = 0; i < str.length; i++) \{\
    hash = str.charCodeAt(i) + ((hash << 5) - hash);\
  \}\
  \
  // Generate hue (0-360) from hash\
  const hue = hash % 360;\
  \
  // Use HSL with fixed saturation and lightness for consistent readability\
  return `hsl($\{hue\}, 70%, 35%)`;\
\}\
\
// Styles for different change types\
private static STYLES = \{\
  DEFAULT: '',\
  CLIENT_NEED: 'background-color: #ffdddd; color: #990000;',\
  CONFLICT: 'background-color: #fff3cd; color: #856404;',\
  TELEHEALTH: 'background-color: #d1ecf1; color: #0c5460;',\
\};\
\
// Determine style based on change reason\
private static getOfficeChangeStyle(appointment: ProcessedAppointment): string \{\
  if (!appointment.officeChange) \{\
    return this.STYLES.DEFAULT;\
  \}\
  \
  const reasonLower = appointment.assignmentReason.toLowerCase();\
  \
  if (reasonLower.includes('client') || reasonLower.includes('accessibility')) \{\
    return this.STYLES.CLIENT_NEED;\
  \} else if (reasonLower.includes('conflict')) \{\
    return this.STYLES.CONFLICT;\
  \} else if (reasonLower.includes('telehealth')) \{\
    return this.STYLES.TELEHEALTH;\
  \}\
  \
  return this.STYLES.DEFAULT;\
\}\
\
// Filter duplicate appointments\
private static filterDuplicates(appointments: ProcessedAppointment[]): ProcessedAppointment[] \{\
  const seen = new Set<string>();\
  const filtered: ProcessedAppointment[] = [];\
  \
  // Sort by lastUpdated (newest first) to keep most recent version\
  const sorted = [...appointments].sort((a, b) => \{\
    const dateA = new Date(a.lastUpdated || 0);\
    const dateB = new Date(b.lastUpdated || 0);\
    return dateB.getTime() - dateA.getTime();\
  \});\
  \
  for (const appt of sorted) \{\
    // Create a unique key combining client, clinician, and time\
    const key = `$\{appt.clientId\}:$\{appt.clinicianId\}:$\{appt.startTime\}`;\
    \
    if (!seen.has(key)) \{\
      seen.add(key);\
      filtered.push(appt);\
    \}\
  \}\
  \
  return filtered;\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Service Initialization\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Use a centralized service initializer for dependency management:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In lib/util/service-initializer.ts\
\
export function initializeServices(options: ServiceOptions = \{\}): ServiceContainer \{\
  const container = new Container();\
  \
  // Register singletons\
  container.registerSingleton<GoogleSheetsService>(\
    GoogleSheetsService, \
    [SheetsCache]\
  );\
  \
  container.registerSingleton<IntakeQService>(\
    IntakeQService\
  );\
  \
  container.registerSingleton<ErrorRecoveryService>(\
    ErrorRecoveryService,\
    [GoogleSheetsService, IntakeQService]\
  );\
  \
  container.registerSingleton<DailyScheduleService>(\
    DailyScheduleService,\
    [GoogleSheetsService]\
  );\
  \
  container.registerSingleton<EmailService>(\
    EmailService\
  );\
  \
  container.registerSingleton<SchedulerService>(\
    SchedulerService,\
    [GoogleSheetsService, DailyScheduleService, EmailService, ErrorRecoveryService]\
  );\
  \
  // Initialize services that need it\
  const sheetsService = container.get<GoogleSheetsService>(GoogleSheetsService);\
  const sheetsCache = container.get<SheetsCache>(SheetsCache);\
  \
  // Preload cache if requested\
  if (options.preloadCache) \{\
    sheetsCache.preloadCommonData(sheetsService)\
      .catch(err => console.error('Error preloading cache:', err));\
  \}\
  \
  // Initialize scheduler if requested\
  if (options.initializeScheduler) \{\
    const schedulerService = container.get<SchedulerService>(SchedulerService);\
    schedulerService.initialize()\
      .catch(err => console.error('Error initializing scheduler:', err));\
  \}\
  \
  return container;\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Testing Strategy\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 1. Unit Testing\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Focus on testing business logic in isolation:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // Example unit test for office assignment\
\
describe('DailyScheduleService', () => \{\
  describe('resolveOfficeAssignments', () => \{\
    it('should assign offices based on priority rules', async () => \{\
      // Arrange\
      const mockSheetsService = createMockSheetsService();\
      const service = new DailyScheduleService(mockSheetsService);\
      const appointments = [\
        createTestAppointment(\{ \
          appointmentId: '1',\
          clientId: 'client1',\
          clinicianId: 'clinician1'\
        \})\
      ];\
      \
      // Mock data for rules\
      mockSheetsService.getAssignmentRules.mockResolvedValue([\
        createTestRule(\{ priority: 100, condition: 'client.id === "client1"', officeIds: 'B-4' \})\
      ]);\
      \
      // Act\
      const result = await service.resolveOfficeAssignments(appointments);\
      \
      // Assert\
      expect(result[0].assignedOfficeId).toBe('B-4');\
      expect(result[0].assignmentReason).toContain('Client-Specific Requirement');\
    \});\
    \
    // Test rate limit handling\
    it('should retry on Google Sheets rate limit', async () => \{\
      // Arrange\
      const mockSheetsService = createMockSheetsService();\
      mockSheetsService.updateAppointment\
        .mockRejectedValueOnce(new Error('RATE_LIMIT'))\
        .mockResolvedValueOnce(undefined);\
      \
      // Act\
      await expect(mockSheetsService.updateAppointment(mockAppointment))\
        .resolves.not.toThrow();\
      \
      // Assert\
      expect(mockSheetsService.updateAppointment).toHaveBeenCalledTimes(2);\
    \});\
  \});\
\});\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 2. Integration Testing\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Test interaction between components:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // Example integration test for webhook processing\
\
describe('Webhook Processing', () => \{\
  describe('processAppointmentEvent', () => \{\
    it('should handle concurrent webhook events correctly', async () => \{\
      // Arrange\
      const mockSheetsService = createMockSheetsService();\
      const mockIntakeQService = createMockIntakeQService();\
      const handler = new AppointmentSyncHandler(mockSheetsService, mockIntakeQService);\
      \
      const payload1 = createTestWebhookPayload(\{\
        Type: 'AppointmentCreated',\
        Appointment: \{ Id: 'test-123', ClientName: 'Test Client' \}\
      \});\
      \
      const payload2 = createTestWebhookPayload(\{\
        Type: 'AppointmentUpdated',\
        Appointment: \{ Id: 'test-123', ClientName: 'Test Client Updated' \}\
      \});\
      \
      // Act - process both events concurrently\
      const [result1, result2] = await Promise.all([\
        handler.processAppointmentEvent(payload1),\
        handler.processAppointmentEvent(payload2)\
      ]);\
      \
      // Assert\
      expect(result1.success || result2.success).toBe(true); // At least one succeeded\
      expect(mockSheetsService.addAppointment).toHaveBeenCalledTimes(1); // Only one create\
      expect(mockSheetsService.updateAppointment).toHaveBeenCalledTimes(1); // Only one update\
    \});\
  \});\
\});\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Coding Conventions\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 Naming Conventions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Files: kebab-case (
\f2\fs26 daily-schedule-service.ts
\f1\fs24 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Classes: PascalCase (
\f2\fs26 GoogleSheetsService
\f1\fs24 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Interfaces: PascalCase (
\f2\fs26 AppointmentRecord
\f1\fs24 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Methods/Functions: camelCase (
\f2\fs26 getAppointments()
\f1\fs24 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Constants:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Coding Conventions (continued)\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 Naming Conventions (continued)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Constants: UPPER_SNAKE_CASE (
\f2\fs26 DEFAULT_TIMEOUT
\f1\fs24 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TypeScript Enums: PascalCase (
\f2\fs26 EventType
\f1\fs24 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Private properties: camelCase with leading underscore (
\f2\fs26 _privateProperty
\f1\fs24 )\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Asynchronous Patterns\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use async/await rather than raw Promises\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement proper error handling in async functions\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use Promise.all for parallel operations where appropriate\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Add retry logic with exponential backoff for external APIs\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 Implementation Checklist\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 When implementing new features or fixes, use this checklist:\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 Planning Phase\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Define the problem clearly\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Identify affected components\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Design the solution approach\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Consider potential rate limit impacts\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Implementation Phase\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Implement batching for multiple operations where possible\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Add proper retry logic for API calls\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Use caching for frequently accessed data\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Ensure both Appointments and Active_Appointments tabs are updated properly\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Testing Phase\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Test with simulated rate limits\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Verify batch operations function correctly\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Test webhook idempotency handling\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Review Phase\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Ensure code follows Google Sheets API best practices\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Verify batch sizes are appropriate\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Check retry logic parameters\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [ ] Ensure all API errors are handled gracefully\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 Common Pitfalls and Solutions\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 Google Sheets API Rate Limits\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem
\f1\b0 : API quota exceeded errors\
\ls12\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Solutions
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement batching for multiple operations\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Add exponential backoff retry logic\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use caching for frequently accessed data\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Leverage Apps Script for bulk operations\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Race Conditions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem
\f1\b0 : Multiple webhooks processed simultaneously\
\ls13\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Solution
\f1\b0 : Implement locking mechanism by appointment ID\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Duplicated Data\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem
\f1\b0 : Same appointment appears multiple times\
\ls14\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Solution
\f1\b0 : Implement idempotent operations and webhook tracking\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Inconsistent State\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem
\f1\b0 : Operations on multiple tabs leave inconsistent state\
\ls15\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Solution
\f1\b0 : Update both tabs with fallback error handling\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 \strokec2 Office Assignment Rule Updates\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 When updating office assignment rules, consider:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Priority Order
\f1\b0 : Rules are processed in strict priority order (100 to 10)\
\ls16\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Rule Conditions
\f1\b0 : Use JavaScript expressions that evaluate to boolean\
\ls16\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Office IDs
\f1\b0 : Use comma-separated lists or special syntax for dynamic values\
\ls16\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Override Levels
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls16\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 hard
\f1\fs24 : Cannot be overridden by lower-priority rules\
\ls16\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 medium
\f1\fs24 : Can be overridden in certain circumstances\
\ls16\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 soft
\f1\fs24 : Easily overridden if needed\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Example rule update for a new office with special features:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 // In the Assignment_Rules sheet, add:\
\{\
  priority: 78,  // Between the age-based rules (80/75) and adult rules (70)\
  ruleName: "Yoga Swing Office Assignment",\
  ruleType: "special-feature",\
  condition: "client.needsYogaSwing === true",\
  officeIds: "B-2,C-1,B-5", // Offices with yoga swings\
  overrideLevel: "medium",\
  active: true,\
  notes: "Assigns clients who need yoga swings to appropriate offices"\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1\fs24 \cf0 When modifying priority values, ensure they fit logically in the hierarchy and don't conflict with existing rules.\
}