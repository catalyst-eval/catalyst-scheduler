{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red31\green29\blue21;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c16078\c14902\c10588;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # IntakeQ API Integration Guide for Catalyst Scheduler\
\
## Authentication\
```typescript\
headers: \{\
  'X-Auth-Key': process.env.INTAKEQ_API_KEY,\
  'Content-Type': 'application/json'\
\}\
```\
\
## Core Endpoints\
\
### Appointments\
```typescript\
// Get Daily Appointments\
GET /api/v1/appointments\
Parameters: \{\
  date: string,            // YYYY-MM-DD\
  include: ['client', 'practitioner'],\
  practitionerEmail?: string\
\}\
\
// Create Appointment\
POST /api/v1/appointments\
Body: \{\
  practitionerId: string,\
  clientId: number,\
  serviceId: string,\
  locationId: string,\
  status: 'Confirmed' | 'WaitingConfirmation',\
  utcDateTime: number,     // Unix timestamp\
  sendClientEmailNotification: boolean,\
  reminderType: 'Sms' | 'Email' | 'Voice' | 'OptOut'\
\}\
\
// Update Appointment\
PUT /api/v1/appointments\
Body: \{\
  id: string,\
  serviceId?: string,\
  locationId?: string,\
  status?: 'Confirmed' | 'WaitingConfirmation',\
  utcDateTime: number\
\}\
```\
\
### Clients\
```typescript\
// Query Clients\
GET /api/v1/clients\
Parameters: \{\
  search?: string,         // name/email/ID\
  page?: number,\
  includeProfile?: boolean,\
  dateCreatedStart?: string,\
  dateCreatedEnd?: string\
\}\
\
// Create/Update Client\
POST /api/v1/clients\
Body: ClientProfile        // Full profile object\
```\
\
## Data Models\
\
### Appointment Object\
```typescript\
interface Appointment \{\
  id: string;\
  clientName: string;\
  clientEmail: string;\
  clientPhone: string;\
  clientId: number;\
  status: 'Confirmed' | 'WaitingConfirmation' | 'Declined' | 'Canceled' | 'Missed';\
  startDate: number;       // Unix timestamp\
  endDate: number;        // Unix timestamp\
  duration: number;       // minutes\
  serviceName: string;\
  serviceId: string;\
  locationName: string;\
  locationId: string;\
  practitionerEmail: string;\
  practitionerName: string;\
  practitionerId: string;\
  price: number;\
  dateCreated: number;    // Unix timestamp\
  bookedByClient: boolean;\
\}\
```\
\
### Client Profile\
```typescript\
interface ClientProfile \{\
  clientId?: number;\
  name: string;\
  firstName: string;\
  lastName: string;\
  email: string;\
  phone: string;\
  dateOfBirth?: number;   // Unix timestamp\
  address?: string;\
  city?: string;\
  stateShort?: string;\
  postalCode?: string;\
  country?: string;\
  customFields?: Array<\{\
    fieldId: string;\
    value: string;\
  \}>;\
\}\
```\
\
## Rate Limiting\
- 120 requests per minute\
- Includes retry-after header when exceeded\
\
## Webhook Integration\
- Endpoint configuration in IntakeQ settings\
- Events:\
  - AppointmentCreated\
  - AppointmentConfirmed\
  - AppointmentRescheduled\
  - AppointmentCanceled\
  - AppointmentDeclined\
  - AppointmentMissed\
  - AppointmentDeleted\
\
### Webhook Payload\
```typescript\
interface WebhookPayload \{\
  eventType: string;\
  actionPerformedByClient: boolean;\
  appointment: Appointment;\
  clientId: number;\
  practiceId: string;\
\}\
```\
\
## Implementation Notes\
\
### Office Assignment Strategy\
1. Use locationId for primary office assignment\
2. Store additional metadata in appointment notes:\
```typescript\
notes: JSON.stringify(\{\
  assignedOffice: string,\
  isAccessible: boolean,\
  assignmentReason: string,\
  lastUpdated: string\
\})\
```\
\
### Error Handling\
1. Implement exponential backoff for rate limits\
2. Cache appointment data locally\
3. Queue failed updates for retry\
4. Maintain audit log of API interactions\
\
### Best Practices\
1. Always verify appointment conflicts before creation\
2. Include error handling for all API calls\
3. Implement webhook verification\
4. Maintain local cache of static data (services, locations)\
5. Log all API interactions for debugging}