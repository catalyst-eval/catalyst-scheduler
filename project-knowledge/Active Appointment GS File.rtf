/**
 * Catalyst Scheduler - Active Appointments Google Apps Script
 * 
 * This script manages the Active_Appointments sheet in the Catalyst Scheduler Google Sheet.
 * It includes functionality for:
 * 1. Daily refreshing of the Active_Appointments tab (5:45 AM)
 * 2. Cleanup of duplicate appointments
 * 3. On-edit trigger to keep Active_Appointments in sync
 * 4. Custom menu for manual operations
 */

function setupDailyTrigger() {
  // Delete any existing triggers to avoid duplicates
  const triggers = ScriptApp.getProjectTriggers();
  for (const trigger of triggers) {
    if (trigger.getHandlerFunction() === 'refreshActiveAppointments') {
      ScriptApp.deleteTrigger(trigger);
    }
  }
  
  ScriptApp.newTrigger('refreshActiveAppointments')
    .timeBased()
    .atHour(5)  // 5 AM
    .nearMinute(45)  // at :45 minutes
    .everyDays(1)
    .inTimezone("America/New_York")  // Explicitly set EST/EDT timezone
    .create();
    
  Logger.log('Daily trigger for refreshActiveAppointments has been set up');
}

/**
 * Refreshes the Active_Appointments tab with today's appointments
 * This runs automatically at 5:45 AM and can be run manually as needed
 * Simplified version that avoids unnecessary date manipulation
 */
function refreshActiveAppointments() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Get the Appointments sheet
  const appointmentsSheet = ss.getSheetByName('Appointments');
  if (!appointmentsSheet) {
    Logger.log('Error: Appointments sheet not found');
    return;
  }
  
  // Get or create the Active_Appointments sheet
  let activeSheet = ss.getSheetByName('Active_Appointments');
  if (!activeSheet) {
    Logger.log('Creating new Active_Appointments sheet');
    activeSheet = ss.insertSheet('Active_Appointments');
  }
  
  // Get all data from Appointments sheet
  const data = appointmentsSheet.getDataRange().getValues();
  const headers = data[0];
  
  // Copy headers to Active_Appointments
  activeSheet.clear();
  activeSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // Find column indices
  const startTimeCol = headers.indexOf('startTime');
  const statusCol = headers.indexOf('status');
  
  if (startTimeCol === -1 || statusCol === -1) {
    Logger.log('Error: Required columns not found in Appointments sheet');
    return;
  }
  
  // Get today's date (in EST/EDT timezone)
  const today = new Date();
  const timeZone = ss.getSpreadsheetTimeZone() || 'America/New_York';
  const todayStr = Utilities.formatDate(today, timeZone, 'yyyy-MM-dd');
  
  Logger.log(`Refreshing Active_Appointments for ${todayStr}`);
  
  // Filter for today's appointments that aren't cancelled or rescheduled
  const todayAppointments = data.slice(1).filter(row => {
    if (!row[startTimeCol]) return false;
    
    let startTime = row[startTimeCol];
    let startDateStr = '';
    
    // Get the date part without manipulating format - just check for today's date
    if (typeof startTime === 'string') {
      startDateStr = startTime.split('T')[0].split(' ')[0];
    } else if (startTime instanceof Date) {
      startDateStr = Utilities.formatDate(startTime, timeZone, 'yyyy-MM-dd');
    } else {
      return false;
    }
    
    // Check status - exclude cancelled and rescheduled
    const status = row[statusCol];
    const validStatus = status !== 'cancelled' &&
      status !== 'rescheduled' &&
      status !== 'deleted';
    
    return startDateStr === todayStr && validStatus;
  });
  
  // Add today's appointments to Active_Appointments
  if (todayAppointments.length > 0) {
    activeSheet.getRange(2, 1, todayAppointments.length, headers.length)
      .setValues(todayAppointments);
    
    // Set formatting to match Appointments sheet
    try {
      const sourceFormat = appointmentsSheet.getRange(1, 1, 1, headers.length);
      const targetFormat = activeSheet.getRange(1, 1, 1, headers.length);
      sourceFormat.copyFormatToRange(activeSheet, 1, headers.length, 1, 1);
    } catch (e) {
      Logger.log('Warning: Could not copy formatting - ' + e.toString());
    }
  }
  
  // Add timestamp and count
  activeSheet.getRange(1, headers.length + 2).setValue('Last Updated:');
  activeSheet.getRange(1, headers.length + 3).setValue(new Date());
  activeSheet.getRange(2, headers.length + 2).setValue('Appointment Count:');
  activeSheet.getRange(2, headers.length + 3).setValue(todayAppointments.length);
  
  // Run duplicate cleanup after refresh to ensure we have clean data
  cleanupDuplicates();
  
  Logger.log(`Refreshed Active_Appointments with ${todayAppointments.length} appointments for today (${todayStr})`);
}

/**
 * Updates Active_Appointments when the Appointments sheet is edited
 * This keeps the Active_Appointments tab in sync throughout the day
 * Also checks for and removes duplicate appointments
 */
function onEdit(e) {
  // Only run if the edit was on the Appointments sheet
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() !== 'Appointments') return;
  
  // Check if we need to update
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  const startTimeCol = headers.indexOf('startTime') + 1; // 1-indexed
  const statusCol = headers.indexOf('status') + 1; // 1-indexed
  const appointmentIdCol = headers.indexOf('appointmentId') + 1; // 1-indexed
  const lastUpdatedCol = headers.indexOf('lastUpdated') + 1; // 1-indexed
  
  // Only run if the edited cell is in a relevant column or if we don't know the edited range
  if (e.range && 
      (e.range.getColumn() === startTimeCol || 
       e.range.getColumn() === statusCol || 
       e.range.getColumn() === 0)) { // 0 means we don't know
    
    Logger.log('Relevant edit detected in Appointments sheet, refreshing Active_Appointments');
    
    // First clean up duplicates in Active_Appointments sheet
    cleanupDuplicates();
    
    // Then refresh the Active_Appointments tab
    refreshActiveAppointments();
  }
}

/**
 * Find and remove duplicate appointments from the Active_Appointments sheet
 * This identifies appointments with the same appointmentId and keeps only the most recently updated one
 * Can be run manually from the menu or automatically via triggers
 */
function cleanupDuplicates() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Active_Appointments');
  
  if (!sheet) {
    Logger.log('Error: Active_Appointments sheet not found');
    return;
  }
  
  // Get all data from Active_Appointments sheet
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  // Get column indices
  const appointmentIdCol = headers.indexOf('appointmentId');
  const lastUpdatedCol = headers.indexOf('lastUpdated');
  
  if (appointmentIdCol === -1) {
    Logger.log('Error: appointmentId column not found');
    return;
  }
  
  // Group appointments by appointmentId
  const appointmentGroups = {};
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const appointmentId = row[appointmentIdCol];
    
    if (!appointmentId) continue;
    
    if (!appointmentGroups[appointmentId]) {
      appointmentGroups[appointmentId] = [];
    }
    
    appointmentGroups[appointmentId].push({
      rowIndex: i + 1, // 1-indexed for sheet operations
      lastUpdated: row[lastUpdatedCol],
      data: row
    });
  }
  
  // Find duplicates and keep only the most recent version
  let duplicatesFound = 0;
  const rowsToDelete = [];
  
  for (const appointmentId in appointmentGroups) {
    const group = appointmentGroups[appointmentId];
    
    if (group.length > 1) {
      duplicatesFound++;
      Logger.log(`Found ${group.length} duplicates for appointment ${appointmentId}`);
      
      // Sort by lastUpdated (descending)
      group.sort((a, b) => {
        if (!a.lastUpdated) return 1;
        if (!b.lastUpdated) return -1;
        return new Date(b.lastUpdated) - new Date(a.lastUpdated);
      });
      
      // Mark all but the most recent for deletion
      for (let i = 1; i < group.length; i++) {
        rowsToDelete.push(group[i].rowIndex);
      }
    }
  }
  
  // Delete duplicate rows in reverse order to maintain correct indices
  if (rowsToDelete.length > 0) {
    rowsToDelete.sort((a, b) => b - a); // Sort descending
    
    for (const rowIndex of rowsToDelete) {
      sheet.deleteRow(rowIndex);
      Logger.log(`Deleted duplicate at row ${rowIndex}`);
    }
    
    Logger.log(`Removed ${rowsToDelete.length} duplicate appointments`);
    
    // Update the appointment count
    const countCell = sheet.getRange(2, headers.length + 3);
    const currentCount = countCell.getValue();
    if (typeof currentCount === 'number') {
      countCell.setValue(currentCount - rowsToDelete.length);
    }
  } else {
    Logger.log('No duplicates found in Active_Appointments');
  }
  
  return {
    duplicatesFound: duplicatesFound,
    duplicatesRemoved: rowsToDelete.length
  };
}

/**
 * Creates a custom menu for manual operations
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Scheduler Tools')
    .addItem('Refresh Active Appointments', 'refreshActiveAppointments')
    .addItem('Clean Up Duplicates', 'cleanupDuplicates')
    .addItem('Setup Daily Refresh', 'setupDailyTrigger')
    .addToUi();
}

/**
 * Additional function to clean up the main Appointments sheet
 * This is separate from the Active_Appointments cleanup
 */
function cleanupAppointmentsSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Appointments');
  
  if (!sheet) {
    Logger.log('Error: Appointments sheet not found');
    return;
  }
  
  // Get all data from Appointments sheet
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  // Get column indices
  const appointmentIdCol = headers.indexOf('appointmentId');
  const lastUpdatedCol = headers.indexOf('lastUpdated');
  
  if (appointmentIdCol === -1) {
    Logger.log('Error: appointmentId column not found');
    return;
  }
  
  // Group appointments by appointmentId
  const appointmentGroups = {};
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const appointmentId = row[appointmentIdCol];
    
    if (!appointmentId) continue;
    
    if (!appointmentGroups[appointmentId]) {
      appointmentGroups[appointmentId] = [];
    }
    
    appointmentGroups[appointmentId].push({
      rowIndex: i + 1, // 1-indexed for sheet operations
      lastUpdated: row[lastUpdatedCol],
      data: row
    });
  }
  
  // Find duplicates and keep only the most recent version
  let duplicatesFound = 0;
  const rowsToDelete = [];
  
  for (const appointmentId in appointmentGroups) {
    const group = appointmentGroups[appointmentId];
    
    if (group.length > 1) {
      duplicatesFound++;
      Logger.log(`Found ${group.length} duplicates for appointment ${appointmentId} in Appointments sheet`);
      
      // Sort by lastUpdated (descending)
      group.sort((a, b) => {
        if (!a.lastUpdated) return 1;
        if (!b.lastUpdated) return -1;
        return new Date(b.lastUpdated) - new Date(a.lastUpdated);
      });
      
      // Mark all but the most recent for deletion
      for (let i = 1; i < group.length; i++) {
        rowsToDelete.push(group[i].rowIndex);
      }
    }
  }
  
  // Delete duplicate rows in reverse order to maintain correct indices
  if (rowsToDelete.length > 0) {
    rowsToDelete.sort((a, b) => b - a); // Sort descending
    
    for (const rowIndex of rowsToDelete) {
      sheet.deleteRow(rowIndex);
      Logger.log(`Deleted duplicate at row ${rowIndex} in Appointments sheet`);
    }
    
    Logger.log(`Removed ${rowsToDelete.length} duplicate appointments from Appointments sheet`);
  } else {
    Logger.log('No duplicates found in Appointments sheet');
  }
  
  return {
    duplicatesFound: duplicatesFound,
    duplicatesRemoved: rowsToDelete.length
  };
}

/**
 * Update the menu to include both cleanup options
 */
function updateMenuWithAllOptions() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Scheduler Tools')
    .addItem('Refresh Active Appointments', 'refreshActiveAppointments')
    .addItem('Clean Up Active Appointments Duplicates', 'cleanupDuplicates')
    .addItem('Clean Up Main Appointments Sheet', 'cleanupAppointmentsSheet')
    .addItem('Clean Up Both Sheets', 'cleanupBothSheets')
    .addItem('Setup Daily Refresh', 'setupDailyTrigger')
    .addToUi();
}

/**
 * Helper function to clean up duplicates in both sheets
 */
function cleanupBothSheets() {
  const activeResult = cleanupDuplicates();
  const mainResult = cleanupAppointmentsSheet();
  
  // Refresh Active_Appointments after cleaning up both sheets
  refreshActiveAppointments();
  
  return {
    activeSheet: activeResult,
    mainSheet: mainResult
  };
}

/**
 * Run this function to update the menu and setup triggers
 */
function initialize() {
  setupDailyTrigger();
  updateMenuWithAllOptions();
  Logger.log('Catalyst Scheduler script initialized');
}