{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red20\green67\blue174;\red246\green247\blue249;\red46\green49\blue51;
\red24\green25\blue27;\red77\green80\blue85;\red186\green6\blue115;\red162\green0\blue16;\red18\green115\blue126;
\red21\green98\blue39;}
{\*\expandedcolortbl;;\cssrgb\c9412\c35294\c73725;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c12549\c12941\c14118;\cssrgb\c37255\c38824\c40784;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c3529\c52157\c56863;
\cssrgb\c7451\c45098\c20000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 setupDailyTrigger\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // Delete any existing triggers to avoid duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 triggers\cf4 \strokec4  = \cf7 \strokec7 ScriptApp\cf4 \strokec4 .\cf5 \strokec5 getProjectTriggers\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 for\cf4 \strokec4  (\cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 trigger\cf4 \strokec4  \cf2 \strokec2 of\cf4 \strokec4  \cf5 \strokec5 triggers\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 trigger\cf4 \strokec4 .\cf5 \strokec5 getHandlerFunction\cf4 \strokec4 () === \cf8 \strokec8 'refreshActiveAppointments'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 ScriptApp\cf4 \strokec4 .\cf5 \strokec5 deleteTrigger\cf4 \strokec4 (\cf5 \strokec5 trigger\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 ScriptApp\cf4 \strokec4 .\cf5 \strokec5 newTrigger\cf4 \strokec4 (\cf8 \strokec8 'refreshActiveAppointments'\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   .\cf5 \strokec5 timeBased\cf4 \strokec4 ()\cb1 \
\cb3   .\cf5 \strokec5 atHour\cf4 \strokec4 (\cf9 \strokec9 5\cf4 \strokec4 )  \cf6 \strokec6 // 5 AM\cf4 \cb1 \strokec4 \
\cb3   .\cf5 \strokec5 nearMinute\cf4 \strokec4 (\cf9 \strokec9 45\cf4 \strokec4 )  \cf6 \strokec6 // at :45 minutes\cf4 \cb1 \strokec4 \
\cb3   .\cf5 \strokec5 everyDays\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 )\cb1 \
\cb3   .\cf5 \strokec5 inTimezone\cf4 \strokec4 (\cf8 \strokec8 "America/New_York"\cf4 \strokec4 )  \cf6 \strokec6 // Explicitly set EST/EDT timezone\cf4 \cb1 \strokec4 \
\cb3   .\cf5 \strokec5 create\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3   \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Daily trigger for refreshActiveAppointments has been set up'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \

\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 /**\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * Refreshes the Active_Appointments tab with today's appointments\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * This runs automatically at 5:45 AM and can be run manually as needed\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * Simplified version that avoids unnecessary date manipulation\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 refreshActiveAppointments\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf5 \strokec5 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Get the Appointments sheet\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 appointmentsSheet\cf4 \strokec4  = \cf5 \strokec5 ss\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'Appointments'\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (!\cf5 \strokec5 appointmentsSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Error: Appointments sheet not found'\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Get or create the Active_Appointments sheet\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 activeSheet\cf4 \strokec4  = \cf5 \strokec5 ss\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf8 \strokec8 'Active_Appointments'\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (!\cf5 \strokec5 activeSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Creating new Active_Appointments sheet'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 activeSheet\cf4 \strokec4  = \cf5 \strokec5 ss\cf4 \strokec4 .\cf5 \strokec5 insertSheet\cf4 \strokec4 (\cf8 \strokec8 'Active_Appointments'\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Get all data from Appointments sheet\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 data\cf4 \strokec4  = \cf5 \strokec5 appointmentsSheet\cf4 \strokec4 .\cf5 \strokec5 getDataRange\cf4 \strokec4 ().\cf5 \strokec5 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 headers\cf4 \strokec4  = \cf5 \strokec5 data\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Copy headers to Active_Appointments\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 clear\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 ).\cf5 \strokec5 setValues\cf4 \strokec4 ([\cf5 \strokec5 headers\cf4 \strokec4 ]);\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Find column indices\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 startTimeCol\cf4 \strokec4  = \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf8 \strokec8 'startTime'\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 statusCol\cf4 \strokec4  = \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf8 \strokec8 'status'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 startTimeCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf5 \strokec5 statusCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Error: Required columns not found in Appointments sheet'\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Get today's date (in EST/EDT timezone)\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 today\cf4 \strokec4  = \cf2 \strokec2 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 timeZone\cf4 \strokec4  = \cf5 \strokec5 ss\cf4 \strokec4 .\cf5 \strokec5 getSpreadsheetTimeZone\cf4 \strokec4 () || \cf8 \strokec8 'America/New_York'\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 todayStr\cf4 \strokec4  = \cf7 \strokec7 Utilities\cf4 \strokec4 .\cf5 \strokec5 formatDate\cf4 \strokec4 (\cf5 \strokec5 today\cf4 \strokec4 , \cf5 \strokec5 timeZone\cf4 \strokec4 , \cf8 \strokec8 'yyyy-MM-dd'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 `Refreshing Active_Appointments for \cf4 \strokec4 $\{\cf5 \strokec5 todayStr\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Filter for today's appointments that aren't cancelled or rescheduled\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 todayAppointments\cf4 \strokec4  = \cf5 \strokec5 data\cf4 \strokec4 .\cf5 \strokec5 slice\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 ).\cf5 \strokec5 filter\cf4 \strokec4 (\cf5 \strokec5 row\cf4 \strokec4  => \{\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (!\cf5 \strokec5 row\cf4 \strokec4 [\cf5 \strokec5 startTimeCol\cf4 \strokec4 ]) \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 false\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 startTime\cf4 \strokec4  = \cf5 \strokec5 row\cf4 \strokec4 [\cf5 \strokec5 startTimeCol\cf4 \strokec4 ];\cb1 \
\cb3     \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 startDateStr\cf4 \strokec4  = \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 // Get the date part without manipulating format - just check for today's date\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf2 \strokec2 typeof\cf4 \strokec4  \cf5 \strokec5 startTime\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 startDateStr\cf4 \strokec4  = \cf5 \strokec5 startTime\cf4 \strokec4 .\cf5 \strokec5 split\cf4 \strokec4 (\cf8 \strokec8 'T'\cf4 \strokec4 )[\cf9 \strokec9 0\cf4 \strokec4 ].\cf5 \strokec5 split\cf4 \strokec4 (\cf8 \strokec8 ' '\cf4 \strokec4 )[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 startTime\cf4 \strokec4  \cf2 \strokec2 instanceof\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 startDateStr\cf4 \strokec4  = \cf7 \strokec7 Utilities\cf4 \strokec4 .\cf5 \strokec5 formatDate\cf4 \strokec4 (\cf5 \strokec5 startTime\cf4 \strokec4 , \cf5 \strokec5 timeZone\cf4 \strokec4 , \cf8 \strokec8 'yyyy-MM-dd'\cf4 \strokec4 );\cb1 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3       \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 false\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 // Check status - exclude cancelled and rescheduled\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 status\cf4 \strokec4  = \cf5 \strokec5 row\cf4 \strokec4 [\cf5 \strokec5 statusCol\cf4 \strokec4 ];\cb1 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 validStatus\cf4 \strokec4  = \cf5 \strokec5 status\cf4 \strokec4  !== \cf8 \strokec8 'cancelled'\cf4 \strokec4  &&\cb1 \
\cb3       \cf5 \strokec5 status\cf4 \strokec4  !== \cf8 \strokec8 'rescheduled'\cf4 \strokec4  &&\cb1 \
\cb3       \cf5 \strokec5 status\cf4 \strokec4  !== \cf8 \strokec8 'deleted'\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 startDateStr\cf4 \strokec4  === \cf5 \strokec5 todayStr\cf4 \strokec4  && \cf5 \strokec5 validStatus\cf4 \strokec4 ;\cb1 \
\cb3   \});\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Add today's appointments to Active_Appointments\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 todayAppointments\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 todayAppointments\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 )\cb1 \
\cb3       .\cf5 \strokec5 setValues\cf4 \strokec4 (\cf5 \strokec5 todayAppointments\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 // Set formatting to match Appointments sheet\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 sourceFormat\cf4 \strokec4  = \cf5 \strokec5 appointmentsSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 );\cb1 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 targetFormat\cf4 \strokec4  = \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 sourceFormat\cf4 \strokec4 .\cf5 \strokec5 copyFormatToRange\cf4 \strokec4 (\cf5 \strokec5 activeSheet\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3     \} \cf2 \strokec2 catch\cf4 \strokec4  (\cf5 \strokec5 e\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Warning: Could not copy formatting - '\cf4 \strokec4  + \cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 toString\cf4 \strokec4 ());\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Add timestamp and count\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf8 \strokec8 'Last Updated:'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  + \cf9 \strokec9 3\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf2 \strokec2 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ());\cb1 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf8 \strokec8 'Appointment Count:'\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 activeSheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  + \cf9 \strokec9 3\cf4 \strokec4 ).\cf5 \strokec5 setValue\cf4 \strokec4 (\cf5 \strokec5 todayAppointments\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 `Refreshed Active_Appointments with \cf4 \strokec4 $\{\cf5 \strokec5 todayAppointments\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4 \}\cf8 \strokec8  appointments for today (\cf4 \strokec4 $\{\cf5 \strokec5 todayStr\cf4 \strokec4 \}\cf8 \strokec8 )`\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \

\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 /**\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * Updates Active_Appointments when the Appointments sheet is edited\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * This keeps the Active_Appointments tab in sync throughout the day\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 onEdit\cf4 \strokec4 (\cf5 \strokec5 e\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // Only run if the edit was on the Appointments sheet\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 sheet\cf4 \strokec4  = \cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 source\cf4 \strokec4 .\cf5 \strokec5 getActiveSheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 sheet\cf4 \strokec4 .\cf5 \strokec5 getName\cf4 \strokec4 () !== \cf8 \strokec8 'Appointments'\cf4 \strokec4 ) \cf2 \strokec2 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Check if we need to update\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf5 \strokec5 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 headers\cf4 \strokec4  = \cf5 \strokec5 sheet\cf4 \strokec4 .\cf5 \strokec5 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf5 \strokec5 sheet\cf4 \strokec4 .\cf5 \strokec5 getLastColumn\cf4 \strokec4 ()).\cf5 \strokec5 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 startTimeCol\cf4 \strokec4  = \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf8 \strokec8 'startTime'\cf4 \strokec4 ) + \cf9 \strokec9 1\cf4 \strokec4 ; \cf6 \strokec6 // 1-indexed\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 statusCol\cf4 \strokec4  = \cf5 \strokec5 headers\cf4 \strokec4 .\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf8 \strokec8 'status'\cf4 \strokec4 ) + \cf9 \strokec9 1\cf4 \strokec4 ; \cf6 \strokec6 // 1-indexed\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Only run if the edited cell is in a relevant column or if we don't know the edited range\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 range\cf4 \strokec4  && \cb1 \
\cb3       (\cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 range\cf4 \strokec4 .\cf5 \strokec5 getColumn\cf4 \strokec4 () === \cf5 \strokec5 startTimeCol\cf4 \strokec4  || \cb1 \
\cb3        \cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 range\cf4 \strokec4 .\cf5 \strokec5 getColumn\cf4 \strokec4 () === \cf5 \strokec5 statusCol\cf4 \strokec4  || \cb1 \
\cb3        \cf5 \strokec5 e\cf4 \strokec4 .\cf5 \strokec5 range\cf4 \strokec4 .\cf5 \strokec5 getColumn\cf4 \strokec4 () === \cf9 \strokec9 0\cf4 \strokec4 )) \{ \cf6 \strokec6 // 0 means we don't know\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf7 \strokec7 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf8 \strokec8 'Relevant edit detected in Appointments sheet, refreshing Active_Appointments'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 refreshActiveAppointments\cf4 \strokec4 ();\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \

\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 /**\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * Creates a custom menu for manual refresh\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 onOpen\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf5 \strokec5 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 ui\cf4 \strokec4 .\cf5 \strokec5 createMenu\cf4 \strokec4 (\cf8 \strokec8 'Scheduler Tools'\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 addItem\cf4 \strokec4 (\cf8 \strokec8 'Refresh Active Appointments'\cf4 \strokec4 , \cf8 \strokec8 'refreshActiveAppointments'\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 addItem\cf4 \strokec4 (\cf8 \strokec8 'Setup Daily Refresh'\cf4 \strokec4 , \cf8 \strokec8 'setupDailyTrigger'\cf4 \strokec4 )\cb1 \
\cb3     .\cf5 \strokec5 addToUi\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
}