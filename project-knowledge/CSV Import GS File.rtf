{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red21\green98\blue39;\red246\green247\blue249;\red46\green49\blue51;
\red77\green80\blue85;\red20\green67\blue174;\red186\green6\blue115;\red162\green0\blue16;\red18\green115\blue126;
\red24\green25\blue27;\red97\green3\blue173;}
{\*\expandedcolortbl;;\cssrgb\c7451\c45098\c20000;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c37255\c38824\c40784;\cssrgb\c9412\c35294\c73725;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c3529\c52157\c56863;
\cssrgb\c12549\c12941\c14118;\cssrgb\c46275\c15294\c73333;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Catalyst Scheduler Data Migration Script for ALL Practitioners\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * This script handles the IntakeQ original format (70 columns)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * and maps it to the Appointments format (17 columns) for ALL practitioners.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * With improved date handling and timezone support\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 // Configuration\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 CONFIG\cf4 \strokec4  = \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 : \cf8 \strokec8 'Original_Appointments'\cf4 \strokec4 ,\cb1 \
\cb3   \cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 : \cf8 \strokec8 'Appointments'\cf4 \strokec4 ,\cb1 \
\cb3   \cf7 \strokec7 CLINICIANS_SHEET_NAME\cf4 \strokec4 : \cf8 \strokec8 'Clinicians_Configuration'\cf4 \strokec4 ,\cb1 \
\cb3   \cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 : \cf8 \strokec8 'Migration_Log'\cf4 \strokec4 ,\cb1 \
\cb3   \cf7 \strokec7 DEFAULT_DURATION\cf4 \strokec4 : \cf9 \strokec9 60\cf4 \strokec4 , \cf5 \strokec5 // Default appointment duration in minutes\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 DEFAULT_TIMEZONE\cf4 \strokec4 : \cf8 \strokec8 'America/New_York'\cf4 \strokec4  \cf5 \strokec5 // Default timezone\cf4 \cb1 \strokec4 \
\cb3 \};\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 // Appointment sheet headers\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 TARGET_HEADERS\cf4 \strokec4  = [\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf8 \strokec8 'appointmentId'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'clientId'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'clientName'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'clientDateOfBirth'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'clinicianId'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'clinicianName'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'currentOfficeId'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'sessionType'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'startTime'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'endTime'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'status'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'source'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'lastUpdated'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'requirements'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'notes'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'assignedOfficeId'\cf4 \strokec4 ,\cb1 \
\cb3   \cf8 \strokec8 'assignmentReason'\cf4 \cb1 \strokec4 \
\cb3 ];\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Add menu to spreadsheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 onOpen\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 createMenu\cf4 \strokec4 (\cf8 \strokec8 'Catalyst Scheduler'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '1. Setup Migration Environment'\cf4 \strokec4 , \cf8 \strokec8 'setupMigration'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '2. Run Full IntakeQ Migration'\cf4 \strokec4 , \cf8 \strokec8 'runFullMigration'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '3. View Column Mappings'\cf4 \strokec4 , \cf8 \strokec8 'viewColumnMappings'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '4. Debug Source Data'\cf4 \strokec4 , \cf8 \strokec8 'debugSourceData'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '5. Fix Clinician IDs Only'\cf4 \strokec4 , \cf8 \strokec8 'fixClinicianIdsOnly'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '6. Check for Duplicates'\cf4 \strokec4 , \cf8 \strokec8 'checkForDuplicates'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addItem\cf4 \strokec4 (\cf8 \strokec8 '7. Test Date Conversion'\cf4 \strokec4 , \cf8 \strokec8 'testDateConversion'\cf4 \strokec4 )\cb1 \
\cb3     .\cf10 \strokec10 addToUi\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Setup the migration environment\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 setupMigration\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Check if the source sheet exists\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 sourceSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 response\cf4 \strokec4  = \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cb1 \
\cb3       \cf8 \strokec8 'Source sheet missing'\cf4 \strokec4 ,\cb1 \
\cb3       \cf8 \strokec8 'The source sheet "'\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '" does not exist. Would you like to create it?'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 YES_NO\cf4 \cb1 \strokec4 \
\cb3     );\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 response\cf4 \strokec4  == \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 Button\cf4 \strokec4 .\cf7 \strokec7 YES\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 insertSheet\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3       \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Created sheet "'\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '". Please copy your original appointment data here before continuing.'\cf4 \strokec4 );\cb1 \
\cb3     \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Check if the target sheet exists\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 targetSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 insertSheet\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Create or clear the target sheet and add headers\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 clear\cf4 \strokec4 ();\cb1 \
\cb3   \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 (\cf7 \strokec7 TARGET_HEADERS\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Create or clear the log sheet\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 logSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 insertSheet\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cf10 \strokec10 logSheet\cf4 \strokec4 .\cf10 \strokec10 clear\cf4 \strokec4 ();\cb1 \
\cb3   \cf10 \strokec10 logSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 ([\cf8 \strokec8 'Timestamp'\cf4 \strokec4 , \cf8 \strokec8 'Action'\cf4 \strokec4 , \cf8 \strokec8 'Status'\cf4 \strokec4 , \cf8 \strokec8 'Details'\cf4 \strokec4 ]);\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log the setup\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Setup'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cf8 \strokec8 'Migration environment prepared'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Setup Complete'\cf4 \strokec4 , \cf8 \strokec8 'Migration environment has been set up. Please ensure your data is in the "'\cf4 \strokec4  + \cb1 \
\cb3     \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '" sheet before running the migration.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Run the full migration process with improved date handling\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 runFullMigration\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Confirm before proceeding\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 response\cf4 \strokec4  = \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cb1 \
\cb3     \cf8 \strokec8 'Confirm Migration'\cf4 \strokec4 ,\cb1 \
\cb3     \cf8 \strokec8 'This will migrate and clean all appointment data from IntakeQ format. Proceed?'\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 YES_NO\cf4 \cb1 \strokec4 \
\cb3   );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 response\cf4 \strokec4  != \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 Button\cf4 \strokec4 .\cf7 \strokec7 YES\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get sheets\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 sourceSheet\cf4 \strokec4  || !\cf10 \strokec10 targetSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Source or target sheet not found. Please run setup first.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get clinician mappings\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianMappings\cf4 \strokec4  = \cf10 \strokec10 getClinicianMappings\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get source data and headers\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceHeaders\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceData\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getDataRange\cf4 \strokec4 ().\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Create column mapping from IntakeQ format to our format\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 columnMap\cf4 \strokec4  = \cf10 \strokec10 createIntakeQColumnMap\cf4 \strokec4 (\cf10 \strokec10 sourceHeaders\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // If mapping failed for critical columns\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  < \cf9 \strokec9 0\cf4 \strokec4  || \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4  < \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Could not properly map essential columns from source sheet. Please ensure it contains IntakeQ data with Id and Date columns.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Failed'\cf4 \strokec4 , \cf8 \strokec8 'Essential column mapping failed: '\cf4 \strokec4  + \cf7 \strokec7 JSON\cf4 \strokec4 .\cf10 \strokec10 stringify\cf4 \strokec4 (\cf10 \strokec10 columnMap\cf4 \strokec4 ));\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Clear existing target data (keeping header row)\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastRow\cf4 \strokec4 () > \cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 deleteRows\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastRow\cf4 \strokec4 () - \cf9 \strokec9 1\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Track processed appointment IDs to avoid duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 processedAppointmentIds\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 duplicatesFound\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 rowsProcessed\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 rowsMigrated\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 errorsEncountered\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianCounts\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log the start of migration\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Migration Started'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 'Processing '\cf4 \strokec4  + (\cf10 \strokec10 sourceData\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  - \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ' rows from '\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Process each row (skip header row)\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 sourceData\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 row\cf4 \strokec4  = \cf10 \strokec10 sourceData\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Get appointment ID from "Id" column\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 appointmentId\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Skip empty rows or rows without appointment ID\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 appointmentId\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Skip'\cf4 \strokec4 , \cf8 \strokec8 'Warning'\cf4 \strokec4 , \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ': Empty appointment ID'\cf4 \strokec4 );\cb1 \
\cb3         \cf6 \strokec6 continue\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Check for duplicate appointment ID\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 processedAppointmentIds\cf4 \strokec4 [\cf10 \strokec10 appointmentId\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Skip'\cf4 \strokec4 , \cf8 \strokec8 'Warning'\cf4 \strokec4 , \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ': Duplicate appointment ID: '\cf4 \strokec4  + \cf10 \strokec10 appointmentId\cf4 \strokec4 );\cb1 \
\cb3         \cf10 \strokec10 duplicatesFound\cf4 \strokec4 ++;\cb1 \
\cb3         \cf6 \strokec6 continue\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Mark this appointment ID as processed\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 processedAppointmentIds\cf4 \strokec4 [\cf10 \strokec10 appointmentId\cf4 \strokec4 ] = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3       \cf10 \strokec10 rowsProcessed\cf4 \strokec4 ++;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Create a new row with cleaned data\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 newRow\cf4 \strokec4  = \cf7 \strokec7 Array\cf4 \strokec4 (\cf7 \strokec7 TARGET_HEADERS\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ).\cf10 \strokec10 fill\cf4 \strokec4 (\cf8 \strokec8 ''\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 1. Appointment ID\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] = \cf10 \strokec10 appointmentId\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 2. Client ID\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ] = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientId\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientId\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 3. Client Name\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 2\cf4 \strokec4 ] = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientName\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientName\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // If ClientName is empty, try combining FirstName and LastName\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 2\cf4 \strokec4 ] && \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 firstName\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  && \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 lastName\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 firstName\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 firstName\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 lastName\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 lastName\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 2\cf4 \strokec4 ] = (\cf10 \strokec10 firstName\cf4 \strokec4  + \cf8 \strokec8 ' '\cf4 \strokec4  + \cf10 \strokec10 lastName\cf4 \strokec4 ).\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 4. Client Date of Birth\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientDateOfBirth\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 dobValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clientDateOfBirth\cf4 \strokec4 ];\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 3\cf4 \strokec4 ] = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 dobValue\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 5-6. Clinician ID and Name\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianName\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 5\cf4 \strokec4 ] = \cf10 \strokec10 clinicianName\cf4 \strokec4 ; \cf5 \strokec5 // Clinician Name\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Track clinician counts\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 clinicianCounts\cf4 \strokec4 [\cf10 \strokec10 clinicianName\cf4 \strokec4 ] = (\cf10 \strokec10 clinicianCounts\cf4 \strokec4 [\cf10 \strokec10 clinicianName\cf4 \strokec4 ] || \cf9 \strokec9 0\cf4 \strokec4 ) + \cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Get clinician ID from mappings\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 4\cf4 \strokec4 ] = \cf10 \strokec10 getClinicianIdFromName\cf4 \strokec4 (\cf10 \strokec10 clinicianName\cf4 \strokec4 , \cf10 \strokec10 clinicianMappings\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 7. Current Office ID (default to TBD)\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 6\cf4 \strokec4 ] = \cf8 \strokec8 'TBD'\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 8. Session Type (derive from Service)\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 serviceValue\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 service\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 service\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 7\cf4 \strokec4 ] = \cf10 \strokec10 determineSessionType\cf4 \strokec4 (\cf10 \strokec10 serviceValue\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 9-10. Start Time and End Time - IMPROVED DATE HANDLING\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 // Get timezone and duration\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 timezone\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 timezone\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  && \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 timezone\cf4 \strokec4 ] ? \cb1 \
\cb3                       \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 timezone\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 () : \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 DEFAULT_TIMEZONE\cf4 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 duration\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  && \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4 ] ? \cb1 \
\cb3                       \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) : \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 DEFAULT_DURATION\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 // Sometimes the Date column contains a Date object, other times it's a string\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 dateValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4 ];\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 // Get start time in ISO format\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 startTimeISO\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 dateValue\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 startTimeISO\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 // Set start time\cf4 \cb1 \strokec4 \
\cb3           \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ] = \cf10 \strokec10 startTimeISO\cf4 \strokec4 ;\cb1 \
\cb3           \cb1 \
\cb3           \cf5 \strokec5 // Calculate end time by adding duration in milliseconds\cf4 \cb1 \strokec4 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 endTimeISO\cf4 \strokec4  = \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 startTimeISO\cf4 \strokec4 , \cf10 \strokec10 duration\cf4 \strokec4 );\cb1 \
\cb3           \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ] = \cf10 \strokec10 endTimeISO\cf4 \strokec4 ;\cb1 \
\cb3           \cb1 \
\cb3           \cf5 \strokec5 // Log for debugging if there are issues\cf4 \cb1 \strokec4 \
\cb3           \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 i\cf4 \strokec4  % \cf9 \strokec9 50\cf4 \strokec4  === \cf9 \strokec9 0\cf4 \strokec4 ) \{ \cf5 \strokec5 // Log every 50 rows to avoid excessive logging\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Processing'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cb1 \
\cb3               \cf8 \strokec8 `Row \cf4 \strokec4 $\{\cf10 \strokec10 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf8 \strokec8 : ID=\cf4 \strokec4 $\{\cf10 \strokec10 appointmentId\cf4 \strokec4 \}\cf8 \strokec8 , Start=\cf4 \strokec4 $\{\cf10 \strokec10 startTimeISO\cf4 \strokec4 \}\cf8 \strokec8 , End=\cf4 \strokec4 $\{\cf10 \strokec10 endTimeISO\cf4 \strokec4 \}\cf8 \strokec8 , Duration=\cf4 \strokec4 $\{\cf10 \strokec10 duration\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3           \}\cb1 \
\cb3         \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Error'\cf4 \strokec4 , \cf8 \strokec8 'Warning'\cf4 \strokec4 , \cb1 \
\cb3             \cf8 \strokec8 `Row \cf4 \strokec4 $\{\cf10 \strokec10 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf8 \strokec8 : ID=\cf4 \strokec4 $\{\cf10 \strokec10 appointmentId\cf4 \strokec4 \}\cf8 \strokec8 , Could not convert date value: \cf4 \strokec4 $\{\cf10 \strokec10 dateValue\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 11. Status\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 status\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 statusValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 status\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ();\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 10\cf4 \strokec4 ] = \cf10 \strokec10 mapStatus\cf4 \strokec4 (\cf10 \strokec10 statusValue\cf4 \strokec4 );\cb1 \
\cb3       \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 10\cf4 \strokec4 ] = \cf8 \strokec8 'scheduled'\cf4 \strokec4 ; \cf5 \strokec5 // Default status\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 12. Source\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 11\cf4 \strokec4 ] = \cf8 \strokec8 'intakeq'\cf4 \strokec4 ; \cf5 \strokec5 // All data from Original_Appointments is from IntakeQ\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 13. Last Updated\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 lastModified\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 lastModifiedValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 lastModified\cf4 \strokec4 ];\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ] = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 lastModifiedValue\cf4 \strokec4 ) || \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ().\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3       \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ] = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ().\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 14. Requirements (default JSON)\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 13\cf4 \strokec4 ] = \cf8 \strokec8 '\{"accessibility":false,"specialFeatures":[]\}'\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 15. Notes\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 14\cf4 \strokec4 ] = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Add service info to notes if not empty\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 serviceValue\cf4 \strokec4  && \cf10 \strokec10 serviceValue\cf4 \strokec4 .\cf10 \strokec10 trim\cf4 \strokec4 () !== \cf8 \strokec8 ''\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 14\cf4 \strokec4 ]) \{\cb1 \
\cb3           \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 14\cf4 \strokec4 ] += \cf8 \strokec8 '\\n'\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 14\cf4 \strokec4 ] += \cf8 \strokec8 'Service: '\cf4 \strokec4  + \cf10 \strokec10 serviceValue\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 16. Assigned Office ID (default to TBD)\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 15\cf4 \strokec4 ] = \cf8 \strokec8 'TBD'\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // 17. Assignment Reason (empty for now)\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 16\cf4 \strokec4 ] = \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Validate both start and end times exist before adding to sheet\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ] || !\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf5 \strokec5 // Log an error for missing times\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Error'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cb1 \
\cb3           \cf8 \strokec8 `Row \cf4 \strokec4 $\{\cf10 \strokec10 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf8 \strokec8 : ID=\cf4 \strokec4 $\{\cf10 \strokec10 appointmentId\cf4 \strokec4 \}\cf8 \strokec8 , Missing start/end time. Start=\cf4 \strokec4 $\{\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ]\}\cf8 \strokec8 , End=\cf4 \strokec4 $\{\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ]\}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 // Skip this row or use default times\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ]) \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ] = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ().\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ]) \cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ] = \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 newRow\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ], \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 DEFAULT_DURATION\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Add the processed row to the target sheet\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 (\cf10 \strokec10 newRow\cf4 \strokec4 );\cb1 \
\cb3       \cf10 \strokec10 rowsMigrated\cf4 \strokec4 ++;\cb1 \
\cb3       \cb1 \
\cb3     \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf10 \strokec10 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ': '\cf4 \strokec4  + \cf10 \strokec10 error\cf4 \strokec4 .\cf10 \strokec10 message\cf4 \strokec4 );\cb1 \
\cb3       \cf10 \strokec10 errorsEncountered\cf4 \strokec4 ++;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Format clinician summary\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianSummary\cf4 \strokec4  = \cf8 \strokec8 "Appointment counts by clinician:\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinician\cf4 \strokec4  \cf6 \strokec6 in\cf4 \strokec4  \cf10 \strokec10 clinicianCounts\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 clinician\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 clinicianSummary\cf4 \strokec4  += \cf10 \strokec10 clinician\cf4 \strokec4  + \cf8 \strokec8 ": "\cf4 \strokec4  + \cf10 \strokec10 clinicianCounts\cf4 \strokec4 [\cf10 \strokec10 clinician\cf4 \strokec4 ] + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log clinician summary\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Migration Stats'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf10 \strokec10 clinicianSummary\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log final stats\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Migration Complete'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cb1 \
\cb3     \cf8 \strokec8 'Processed: '\cf4 \strokec4  + \cf10 \strokec10 rowsProcessed\cf4 \strokec4  + \cb1 \
\cb3     \cf8 \strokec8 ', Migrated: '\cf4 \strokec4  + \cf10 \strokec10 rowsMigrated\cf4 \strokec4  + \cb1 \
\cb3     \cf8 \strokec8 ', Duplicates: '\cf4 \strokec4  + \cf10 \strokec10 duplicatesFound\cf4 \strokec4  + \cb1 \
\cb3     \cf8 \strokec8 ', Errors: '\cf4 \strokec4  + \cf10 \strokec10 errorsEncountered\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Migration Complete'\cf4 \strokec4 , \cb1 \
\cb3     \cf8 \strokec8 'Migration completed with the following results:\\n\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf8 \strokec8 'Rows processed: '\cf4 \strokec4  + \cf10 \strokec10 rowsProcessed\cf4 \strokec4  + \cf8 \strokec8 '\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf8 \strokec8 'Rows migrated: '\cf4 \strokec4  + \cf10 \strokec10 rowsMigrated\cf4 \strokec4  + \cf8 \strokec8 '\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf8 \strokec8 'Duplicates found: '\cf4 \strokec4  + \cf10 \strokec10 duplicatesFound\cf4 \strokec4  + \cf8 \strokec8 '\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf8 \strokec8 'Errors encountered: '\cf4 \strokec4  + \cf10 \strokec10 errorsEncountered\cf4 \strokec4  + \cf8 \strokec8 '\\n\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf10 \strokec10 clinicianSummary\cf4 \strokec4  + \cf8 \strokec8 '\\n\\n'\cf4 \strokec4  +\cb1 \
\cb3     \cf8 \strokec8 'Check the '\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 ' sheet for details.'\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Test date conversion with different input formats\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * This is a helper function to validate the date handling\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 testDateConversion\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 logSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 insertSheet\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 logSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 ([\cf8 \strokec8 'Timestamp'\cf4 \strokec4 , \cf8 \strokec8 'Action'\cf4 \strokec4 , \cf8 \strokec8 'Status'\cf4 \strokec4 , \cf8 \strokec8 'Details'\cf4 \strokec4 ]);\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Test different date formats\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 testDates\cf4 \strokec4  = [\cb1 \
\cb3     \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf8 \strokec8 '2023-01-01T10:00:00'\cf4 \strokec4 ),  \cf5 \strokec5 // JavaScript Date object\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 '2023-02-15T14:30:00'\cf4 \strokec4 ,            \cf5 \strokec5 // ISO string\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 '2/15/2023 2:30 PM'\cf4 \strokec4 ,              \cf5 \strokec5 // US date string\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 '15/02/2023 14:30'\cf4 \strokec4 ,               \cf5 \strokec5 // European date string\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 44907.60417\cf4 \strokec4 ,                      \cf5 \strokec5 // Excel date serial (2023-01-01 14:30)\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 44954\cf4 \strokec4                              \cf5 \strokec5 // Excel date serial without time (2023-02-15)\cf4 \cb1 \strokec4 \
\cb3   ];\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Test'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 'Starting date conversion tests'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 testDates\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 input\cf4 \strokec4  = \cf10 \strokec10 testDates\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 isoDate\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 input\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Test'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cb1 \
\cb3       \cf8 \strokec8 `Test \cf4 \strokec4 $\{\cf10 \strokec10 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf8 \strokec8 : Input=\cf4 \strokec4 $\{\cf10 \strokec10 input\cf4 \strokec4 \}\cf8 \strokec8  (type=\cf4 \strokec4 $\{\cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 input\cf4 \strokec4 \}\cf8 \strokec8 ), Output=\cf4 \strokec4 $\{\cf10 \strokec10 isoDate\cf4 \strokec4  || \cf8 \strokec8 'FAILED'\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 isoDate\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 // Test end time calculation with 45 minute duration\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 endTime\cf4 \strokec4  = \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 isoDate\cf4 \strokec4 , \cf9 \strokec9 45\cf4 \strokec4 );\cb1 \
\cb3       \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'End Time Test'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cb1 \
\cb3         \cf8 \strokec8 `Test \cf4 \strokec4 $\{\cf10 \strokec10 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf8 \strokec8 : Start=\cf4 \strokec4 $\{\cf10 \strokec10 isoDate\cf4 \strokec4 \}\cf8 \strokec8 , End=\cf4 \strokec4 $\{\cf10 \strokec10 endTime\cf4 \strokec4 \}\cf8 \strokec8 , Duration=45 mins`\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Test timezone handling\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 timezone\cf4 \strokec4  = \cf8 \strokec8 'America/New_York'\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Timezone Test'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 `Testing with timezone: \cf4 \strokec4 $\{\cf10 \strokec10 timezone\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 date\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf8 \strokec8 '2023-06-01T14:30:00'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 isoDate\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 date\cf4 \strokec4 );\cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Timezone Test'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cb1 \
\cb3     \cf8 \strokec8 `Date=\cf4 \strokec4 $\{\cf10 \strokec10 date\cf4 \strokec4 \}\cf8 \strokec8 , ISO=\cf4 \strokec4 $\{\cf10 \strokec10 isoDate\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ().\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Date Tests Complete'\cf4 \strokec4 , \cb1 \
\cb3     \cf8 \strokec8 'Date conversion tests are complete. See the log sheet for results.'\cf4 \strokec4 ,\cb1 \
\cb3     \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ().\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Create column mapping specifically for IntakeQ format\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 createIntakeQColumnMap\cf4 \strokec4 (\cf10 \strokec10 headers\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 map\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Initialize with -1 for all fields we need to map\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientId\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientName\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 firstName\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 lastName\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientDateOfBirth\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 status\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 service\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 lastModified\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 timezone\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Scan headers for exact matches\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 headers\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 header\cf4 \strokec4  = \cf10 \strokec10 headers\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Skip empty headers\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 header\cf4 \strokec4 ) \cf6 \strokec6 continue\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Map IntakeQ headers to our format (case-sensitive)\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 switch\cf4 \strokec4 (\cf10 \strokec10 header\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Id'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'ClientId'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientId\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'ClientName'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientName\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'FirstName'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 firstName\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'LastName'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 lastName\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'ClientDOB'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientDateOfBirth\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Practitioner'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Date'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Duration'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Status'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 status\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Service'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 service\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'LastModified'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 lastModified\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Notes'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 case\cf4 \strokec4  \cf8 \strokec8 'Timezone'\cf4 \strokec4 : \cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 timezone\cf4 \strokec4  = \cf10 \strokec10 i\cf4 \strokec4 ; \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Column Mapping'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 'Created IntakeQ column map: '\cf4 \strokec4  + \cf7 \strokec7 JSON\cf4 \strokec4 .\cf10 \strokec10 stringify\cf4 \strokec4 (\cf10 \strokec10 map\cf4 \strokec4 ));\cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 map\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Get clinician ID from name using mappings\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 getClinicianIdFromName\cf4 \strokec4 (\cf10 \strokec10 clinicianName\cf4 \strokec4 , \cf10 \strokec10 mappings\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 clinicianName\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 nameLower\cf4 \strokec4  = \cf10 \strokec10 clinicianName\cf4 \strokec4 .\cf10 \strokec10 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Direct match\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 mappings\cf4 \strokec4 [\cf10 \strokec10 nameLower\cf4 \strokec4 ]) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4 [\cf10 \strokec10 nameLower\cf4 \strokec4 ].\cf10 \strokec10 id\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Try fuzzy matching\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 key\cf4 \strokec4  \cf6 \strokec6 in\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 // If the clinician name contains the key or vice versa\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 nameLower\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf10 \strokec10 key\cf4 \strokec4 ) || \cf10 \strokec10 key\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf10 \strokec10 nameLower\cf4 \strokec4 )) \{\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4 [\cf10 \strokec10 key\cf4 \strokec4 ].\cf10 \strokec10 id\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Alternatively, split the name and check first/last name matches\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 nameParts\cf4 \strokec4  = \cf10 \strokec10 nameLower\cf4 \strokec4 .\cf10 \strokec10 split\cf4 \strokec4 (\cf11 \cb3 \strokec11 /\\s+/\cf4 \cb3 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 keyParts\cf4 \strokec4  = \cf10 \strokec10 key\cf4 \strokec4 .\cf10 \strokec10 split\cf4 \strokec4 (\cf11 \cb3 \strokec11 /\\s+/\cf4 \cb3 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 nameParts\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4  && \cf10 \strokec10 keyParts\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 // If first name or last name matches\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 nameParts\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] === \cf10 \strokec10 keyParts\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ] || \cf10 \strokec10 nameParts\cf4 \strokec4 [\cf10 \strokec10 nameParts\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  - \cf9 \strokec9 1\cf4 \strokec4 ] === \cf10 \strokec10 keyParts\cf4 \strokec4 [\cf10 \strokec10 keyParts\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  - \cf9 \strokec9 1\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4 [\cf10 \strokec10 key\cf4 \strokec4 ].\cf10 \strokec10 id\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // If no match found, use the first part of the name as prefix + '1'\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 nameLower\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 initial\cf4 \strokec4  = \cf10 \strokec10 nameLower\cf4 \strokec4 .\cf10 \strokec10 charAt\cf4 \strokec4 (\cf9 \strokec9 0\cf4 \strokec4 ).\cf10 \strokec10 toUpperCase\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 initial\cf4 \strokec4  + \cf8 \strokec8 '1'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Determine session type from service name\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 determineSessionType\cf4 \strokec4 (\cf10 \strokec10 serviceName\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 serviceName\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'in-person'\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 lowerService\cf4 \strokec4  = \cf10 \strokec10 serviceName\cf4 \strokec4 .\cf10 \strokec10 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Check for telehealth indicators\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerService\cf4 \strokec4 .\cf10 \strokec10 match\cf4 \strokec4 (\cf11 \cb3 \strokec11 /tele|virtual|remote|video|zoom|online/\cf4 \cb3 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'telehealth'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Check for group session indicators\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerService\cf4 \strokec4 .\cf10 \strokec10 match\cf4 \strokec4 (\cf11 \cb3 \strokec11 /group|workshop|class|seminar/\cf4 \cb3 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'group'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Check for family session indicators\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerService\cf4 \strokec4 .\cf10 \strokec10 match\cf4 \strokec4 (\cf11 \cb3 \strokec11 /family|couple|relationship|parent.*child/\cf4 \cb3 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'family'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Default to in-person\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'in-person'\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Convert any date value to ISO string with robust error handling\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 value\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 value\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 // 1. If it's already a well-formatted ISO string, return it\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4  && \cf11 \cb3 \strokec11 /^\\d\{4\}-\\d\{2\}-\\d\{2\}T\\d\{2\}:\\d\{2\}:\\d\{2\}/\cf4 \cb3 \strokec4 .\cf10 \strokec10 test\cf4 \strokec4 (\cf10 \strokec10 value\cf4 \strokec4 )) \{\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // 2. Handle Excel date serials (numbers)\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4  === \cf8 \strokec8 'number'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 // Excel dates are days since Dec 30, 1899\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 excelEpoch\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf7 \strokec7 Date\cf4 \strokec4 .\cf7 \strokec7 UTC\cf4 \strokec4 (\cf9 \strokec9 1899\cf4 \strokec4 , \cf9 \strokec9 11\cf4 \strokec4 , \cf9 \strokec9 30\cf4 \strokec4 ));\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 daysSinceEpoch\cf4 \strokec4  = \cf10 \strokec10 value\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Extract the integer part (days) and fractional part (time)\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 days\cf4 \strokec4  = \cf7 \strokec7 Math\cf4 \strokec4 .\cf10 \strokec10 floor\cf4 \strokec4 (\cf10 \strokec10 daysSinceEpoch\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 timeFraction\cf4 \strokec4  = \cf10 \strokec10 daysSinceEpoch\cf4 \strokec4  - \cf10 \strokec10 days\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Calculate milliseconds\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 millisInDay\cf4 \strokec4  = \cf9 \strokec9 24\cf4 \strokec4  * \cf9 \strokec9 60\cf4 \strokec4  * \cf9 \strokec9 60\cf4 \strokec4  * \cf9 \strokec9 1000\cf4 \strokec4 ;\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 dateObj\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 excelEpoch\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 () + \cf10 \strokec10 days\cf4 \strokec4  * \cf10 \strokec10 millisInDay\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Add time fraction\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 dateObj\cf4 \strokec4 .\cf10 \strokec10 setMilliseconds\cf4 \strokec4 (\cf10 \strokec10 dateObj\cf4 \strokec4 .\cf10 \strokec10 getMilliseconds\cf4 \strokec4 () + \cf10 \strokec10 timeFraction\cf4 \strokec4  * \cf10 \strokec10 millisInDay\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 dateObj\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // 3. Handle JavaScript Date objects\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 value\cf4 \strokec4  \cf6 \strokec6 instanceof\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 // Check if it's a valid date\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 value\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3         \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3       \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf6 \strokec6 throw\cf4 \strokec4  \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Error\cf4 \strokec4 (\cf8 \strokec8 'Invalid Date object'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // 4. Try to parse strings in various formats\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4  === \cf8 \strokec8 'string'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 // Try standard Date parsing\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 parsedDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 value\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 parsedDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3         \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 parsedDate\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Try US format: MM/DD/YYYY\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 usParts\cf4 \strokec4  = \cf10 \strokec10 value\cf4 \strokec4 .\cf10 \strokec10 match\cf4 \strokec4 (\cf11 \cb3 \strokec11 /(\\d\{1,2\})\\/(\\d\{1,2\})\\/(\\d\{4\})/\cf4 \cb3 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 usParts\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 // Month is 0-based in JavaScript Date\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 usDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 usParts\cf4 \strokec4 [\cf9 \strokec9 3\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ),\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 usParts\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) - \cf9 \strokec9 1\cf4 \strokec4 ,\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 usParts\cf4 \strokec4 [\cf9 \strokec9 2\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 )\cb1 \
\cb3         );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 usDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3           \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 usDate\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Try European format: DD/MM/YYYY\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 euParts\cf4 \strokec4  = \cf10 \strokec10 value\cf4 \strokec4 .\cf10 \strokec10 match\cf4 \strokec4 (\cf11 \cb3 \strokec11 /(\\d\{1,2\})\\/(\\d\{1,2\})\\/(\\d\{4\})/\cf4 \cb3 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 euParts\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 // Month is 0-based in JavaScript Date\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 euDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 euParts\cf4 \strokec4 [\cf9 \strokec9 3\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ),\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 euParts\cf4 \strokec4 [\cf9 \strokec9 2\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 ) - \cf9 \strokec9 1\cf4 \strokec4 ,\cb1 \
\cb3           \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 euParts\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ], \cf9 \strokec9 10\cf4 \strokec4 )\cb1 \
\cb3         );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 euDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3           \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 euDate\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // If all else fails, try a last-resort parsing\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fallbackDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf7 \strokec7 String\cf4 \strokec4 (\cf10 \strokec10 value\cf4 \strokec4 ));\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 fallbackDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 fallbackDate\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Conversion'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 `Failed to convert date value: \cf4 \strokec4 $\{\cf10 \strokec10 value\cf4 \strokec4 \}\cf8 \strokec8  (type: \cf4 \strokec4 $\{\cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 value\cf4 \strokec4 \}\cf8 \strokec8 )`\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3   \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf10 \strokec10 e\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Conversion'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 `Exception converting date value: \cf4 \strokec4 $\{\cf10 \strokec10 value\cf4 \strokec4 \}\cf8 \strokec8  - \cf4 \strokec4 $\{\cf10 \strokec10 e\cf4 \strokec4 .\cf10 \strokec10 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Calculate end time by adding duration to start time\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 startTimeISO\cf4 \strokec4 , \cf10 \strokec10 durationMinutes\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 startTimeISO\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Ensure we have a valid duration\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 durationMinutes\cf4 \strokec4  = \cf10 \strokec10 durationMinutes\cf4 \strokec4  || \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 DEFAULT_DURATION\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Parse the ISO string to a Date object\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 startDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 startTimeISO\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Check if we have a valid date\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 startDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ())) \{\cb1 \
\cb3       \cf6 \strokec6 throw\cf4 \strokec4  \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Error\cf4 \strokec4 (\cf8 \strokec8 `Invalid start time: \cf4 \strokec4 $\{\cf10 \strokec10 startTimeISO\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Calculate end time by adding duration in milliseconds\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 endDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 startDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 () + \cf10 \strokec10 durationMinutes\cf4 \strokec4  * \cf9 \strokec9 60\cf4 \strokec4  * \cf9 \strokec9 1000\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Return the end time as ISO string\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 endDate\cf4 \strokec4 .\cf10 \strokec10 toISOString\cf4 \strokec4 ();\cb1 \
\cb3   \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf10 \strokec10 e\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'End Time Calculation'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cb1 \
\cb3       \cf8 \strokec8 `Error calculating end time from \cf4 \strokec4 $\{\cf10 \strokec10 startTimeISO\cf4 \strokec4 \}\cf8 \strokec8  with duration \cf4 \strokec4 $\{\cf10 \strokec10 durationMinutes\cf4 \strokec4 \}\cf8 \strokec8 : \cf4 \strokec4 $\{\cf10 \strokec10 e\cf4 \strokec4 .\cf10 \strokec10 message\cf4 \strokec4 \}\cf8 \strokec8 `\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Map IntakeQ status to our status format\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 mapStatus\cf4 \strokec4 (\cf10 \strokec10 status\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 status\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'scheduled'\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 lowerStatus\cf4 \strokec4  = \cf10 \strokec10 status\cf4 \strokec4 .\cf10 \strokec10 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerStatus\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf8 \strokec8 'cancel'\cf4 \strokec4 ) || \cf10 \strokec10 lowerStatus\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf8 \strokec8 'cancel'\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'cancelled'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerStatus\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf8 \strokec8 'complet'\cf4 \strokec4 ) || \cf10 \strokec10 lowerStatus\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf8 \strokec8 'attend'\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'completed'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 lowerStatus\cf4 \strokec4 .\cf10 \strokec10 includes\cf4 \strokec4 (\cf8 \strokec8 'reschedul'\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'rescheduled'\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 'scheduled'\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Get clinician mappings from the Clinicians_Configuration sheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 getClinicianMappings\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 cliniciansSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 CLINICIANS_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 cliniciansSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Warning'\cf4 \strokec4 , \cf8 \strokec8 'Warning'\cf4 \strokec4 , \cf8 \strokec8 'Clinicians_Configuration sheet not found, using empty mappings'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4  \{\};\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 data\cf4 \strokec4  = \cf10 \strokec10 cliniciansSheet\cf4 \strokec4 .\cf10 \strokec10 getDataRange\cf4 \strokec4 ().\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Skip header row\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 data\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 row\cf4 \strokec4  = \cf10 \strokec10 data\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianId\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 name\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 intakeQId\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ] ? \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 clinicianId\cf4 \strokec4  && \cf10 \strokec10 name\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 mappings\cf4 \strokec4 [\cf10 \strokec10 name\cf4 \strokec4 .\cf10 \strokec10 toLowerCase\cf4 \strokec4 ()] = \{\cb1 \
\cb3         \cf10 \strokec10 id\cf4 \strokec4 : \cf10 \strokec10 clinicianId\cf4 \strokec4 ,\cb1 \
\cb3         \cf10 \strokec10 name\cf4 \strokec4 : \cf10 \strokec10 name\cf4 \strokec4 ,\cb1 \
\cb3         \cf10 \strokec10 intakeQId\cf4 \strokec4 : \cf10 \strokec10 intakeQId\cf4 \cb1 \strokec4 \
\cb3       \};\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Clinician Mappings'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 'Loaded '\cf4 \strokec4  + \cf7 \strokec7 Object\cf4 \strokec4 .\cf10 \strokec10 keys\cf4 \strokec4 (\cf10 \strokec10 mappings\cf4 \strokec4 ).\cf10 \strokec10 length\cf4 \strokec4  + \cf8 \strokec8 ' clinician mappings'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 mappings\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Fix clinician IDs in the appointment sheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 fixClinicianIdsOnly\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 targetSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Target sheet "'\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '" not found.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get clinician mappings\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianMappings\cf4 \strokec4  = \cf10 \strokec10 getClinicianMappings\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get all data (excluding header row)\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 data\cf4 \strokec4  = \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastRow\cf4 \strokec4 () - \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 updated\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Process each row\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 data\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 row\cf4 \strokec4  = \cf10 \strokec10 data\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianName\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 5\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 (); \cf5 \strokec5 // clinicianName column\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 clinicianId\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 4\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 (); \cf5 \strokec5 // clinicianId column\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedId\cf4 \strokec4  = \cf10 \strokec10 getClinicianIdFromName\cf4 \strokec4 (\cf10 \strokec10 clinicianName\cf4 \strokec4 , \cf10 \strokec10 clinicianMappings\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedId\cf4 \strokec4  && \cf10 \strokec10 fixedId\cf4 \strokec4  !== \cf10 \strokec10 clinicianId\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 // Update the cell with the fixed ID\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 5\cf4 \strokec4 ).\cf10 \strokec10 setValue\cf4 \strokec4 (\cf10 \strokec10 fixedId\cf4 \strokec4 );\cb1 \
\cb3         \cf10 \strokec10 updated\cf4 \strokec4 ++;\cb1 \
\cb3         \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Fix Clinician ID'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cb1 \
\cb3           \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ) + \cf8 \strokec8 ': Changed "'\cf4 \strokec4  + \cf10 \strokec10 clinicianId\cf4 \strokec4  + \cf8 \strokec8 '" to "'\cf4 \strokec4  + \cf10 \strokec10 fixedId\cf4 \strokec4  + \cf8 \strokec8 '" for '\cf4 \strokec4  + \cf10 \strokec10 clinicianName\cf4 \strokec4 );\cb1 \
\cb3           \}\cb1 \
\cb3     \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf10 \strokec10 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ) + \cf8 \strokec8 ': '\cf4 \strokec4  + \cf10 \strokec10 error\cf4 \strokec4 .\cf10 \strokec10 message\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Fix Clinician IDs Complete'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cf8 \strokec8 'Updated '\cf4 \strokec4  + \cf10 \strokec10 updated\cf4 \strokec4  + \cf8 \strokec8 ' clinician IDs'\cf4 \strokec4 );\cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Fix Complete'\cf4 \strokec4 , \cf8 \strokec8 'Updated '\cf4 \strokec4  + \cf10 \strokec10 updated\cf4 \strokec4  + \cf8 \strokec8 ' clinician IDs.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Check for duplicate appointment IDs\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 checkForDuplicates\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 targetSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Target sheet "'\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '" not found.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get all appointment IDs\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 data\cf4 \strokec4  = \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastRow\cf4 \strokec4 () - \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 ).\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 appointmentIds\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 duplicates\cf4 \strokec4  = [];\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Find duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 data\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 appointmentId\cf4 \strokec4  = \cf10 \strokec10 data\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ][\cf9 \strokec9 0\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 appointmentId\cf4 \strokec4 ) \cf6 \strokec6 continue\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 appointmentIds\cf4 \strokec4 [\cf10 \strokec10 appointmentId\cf4 \strokec4 ]) \{\cb1 \
\cb3       \cf10 \strokec10 duplicates\cf4 \strokec4 .\cf10 \strokec10 push\cf4 \strokec4 (\{\cb1 \
\cb3         \cf10 \strokec10 id\cf4 \strokec4 : \cf10 \strokec10 appointmentId\cf4 \strokec4 ,\cb1 \
\cb3         \cf10 \strokec10 firstRow\cf4 \strokec4 : \cf10 \strokec10 appointmentIds\cf4 \strokec4 [\cf10 \strokec10 appointmentId\cf4 \strokec4 ],\cb1 \
\cb3         \cf10 \strokec10 duplicateRow\cf4 \strokec4 : \cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \cb1 \strokec4 \
\cb3       \});\cb1 \
\cb3     \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3       \cf10 \strokec10 appointmentIds\cf4 \strokec4 [\cf10 \strokec10 appointmentId\cf4 \strokec4 ] = \cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Report results\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 duplicates\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  > \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 // Log the duplicates\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 duplicates\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 dup\cf4 \strokec4  = \cf10 \strokec10 duplicates\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Duplicate Found'\cf4 \strokec4 , \cf8 \strokec8 'Warning'\cf4 \strokec4 , \cb1 \
\cb3         \cf8 \strokec8 'Appointment ID: '\cf4 \strokec4  + \cf10 \strokec10 dup\cf4 \strokec4 .\cf10 \strokec10 id\cf4 \strokec4  + \cf8 \strokec8 ' found in rows '\cf4 \strokec4  + \cf10 \strokec10 dup\cf4 \strokec4 .\cf10 \strokec10 firstRow\cf4 \strokec4  + \cf8 \strokec8 ' and '\cf4 \strokec4  + \cf10 \strokec10 dup\cf4 \strokec4 .\cf10 \strokec10 duplicateRow\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Duplicates Found'\cf4 \strokec4 , \cb1 \
\cb3       \cf8 \strokec8 'Found '\cf4 \strokec4  + \cf10 \strokec10 duplicates\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  + \cf8 \strokec8 ' duplicate appointment IDs. '\cf4 \strokec4  +\cb1 \
\cb3       \cf8 \strokec8 'See the '\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 ' sheet for details.'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3   \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Check Duplicates'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cf8 \strokec8 'No duplicate appointment IDs found'\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'No Duplicates'\cf4 \strokec4 , \cf8 \strokec8 'No duplicate appointment IDs found.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Debug function to show unique practitioner names from source data\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 debugSourceData\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 sourceSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Source sheet not found. Please run setup first.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get source headers and data\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceHeaders\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceData\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getDataRange\cf4 \strokec4 ().\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 columnMap\cf4 \strokec4  = \cf10 \strokec10 createIntakeQColumnMap\cf4 \strokec4 (\cf10 \strokec10 sourceHeaders\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Find practitioner column\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 practIndex\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 practIndex\cf4 \strokec4  < \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Could not find Practitioner column in source data.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Collect unique practitioners\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 practitioners\cf4 \strokec4  = \{\};\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 totalRows\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Skip header row\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 sourceData\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 row\cf4 \strokec4  = \cf10 \strokec10 sourceData\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 practitioner\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf10 \strokec10 practIndex\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 practitioner\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 practitioners\cf4 \strokec4 [\cf10 \strokec10 practitioner\cf4 \strokec4 ] = (\cf10 \strokec10 practitioners\cf4 \strokec4 [\cf10 \strokec10 practitioner\cf4 \strokec4 ] || \cf9 \strokec9 0\cf4 \strokec4 ) + \cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3       \cf10 \strokec10 totalRows\cf4 \strokec4 ++;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Format output\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 output\cf4 \strokec4  = \cf8 \strokec8 "Summary of source data:\\n\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Total rows: "\cf4 \strokec4  + (\cf10 \strokec10 sourceData\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4  - \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Rows with practitioners: "\cf4 \strokec4  + \cf10 \strokec10 totalRows\cf4 \strokec4  + \cf8 \strokec8 "\\n\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Practitioners found:\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 pract\cf4 \strokec4  \cf6 \strokec6 in\cf4 \strokec4  \cf10 \strokec10 practitioners\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "- "\cf4 \strokec4  + \cf10 \strokec10 pract\cf4 \strokec4  + \cf8 \strokec8 ": "\cf4 \strokec4  + \cf10 \strokec10 practitioners\cf4 \strokec4 [\cf10 \strokec10 pract\cf4 \strokec4 ] + \cf8 \strokec8 " appointments\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Show dialog\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Source Data Debug'\cf4 \strokec4 , \cf10 \strokec10 output\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log the findings\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Debug'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf8 \strokec8 'Found '\cf4 \strokec4  + \cf7 \strokec7 Object\cf4 \strokec4 .\cf10 \strokec10 keys\cf4 \strokec4 (\cf10 \strokec10 practitioners\cf4 \strokec4 ).\cf10 \strokec10 length\cf4 \strokec4  + \cf8 \strokec8 ' practitioners across '\cf4 \strokec4  + \cf10 \strokec10 totalRows\cf4 \strokec4  + \cf8 \strokec8 ' rows'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Show column mappings dialog to help understand the data structure\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 viewColumnMappings\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 sourceSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ().\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Source sheet not found. Please run setup first.'\cf4 \strokec4 , \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ().\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get source headers\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceHeaders\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 map\cf4 \strokec4  = \cf10 \strokec10 createIntakeQColumnMap\cf4 \strokec4 (\cf10 \strokec10 sourceHeaders\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Format the output\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 output\cf4 \strokec4  = \cf8 \strokec8 "Column Mappings from IntakeQ to Appointments:\\n\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "SOURCE \uc0\u8594  TARGET\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "----------------\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Id \uc0\u8594  appointmentId (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "ClientId \uc0\u8594  clientId (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientId\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "ClientName \uc0\u8594  clientName (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientName\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "ClientDOB \uc0\u8594  clientDateOfBirth (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clientDateOfBirth\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Derived) \uc0\u8594  clinicianId\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Practitioner \uc0\u8594  clinicianName (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 clinicianName\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Default: TBD) \uc0\u8594  currentOfficeId\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Derived from Service) \uc0\u8594  sessionType\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Date \uc0\u8594  startTime (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 date\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Date + Duration) \uc0\u8594  endTime\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Status \uc0\u8594  status (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 status\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Default: 'intakeq') \uc0\u8594  source\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "LastModified \uc0\u8594  lastUpdated (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 lastModified\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Default: JSON) \uc0\u8594  requirements\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "Notes \uc0\u8594  notes (Column "\cf4 \strokec4  + (\cf10 \strokec10 map\cf4 \strokec4 .\cf10 \strokec10 notes\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ) + \cf8 \strokec8 ")\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Default: TBD) \uc0\u8594  assignedOfficeId\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 output\cf4 \strokec4  += \cf8 \strokec8 "(Empty) \uc0\u8594  assignmentReason\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Show dialog\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Column Mappings'\cf4 \strokec4 , \cf10 \strokec10 output\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Log an action to the log sheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 logAction\cf4 \strokec4 (\cf10 \strokec10 action\cf4 \strokec4 , \cf10 \strokec10 status\cf4 \strokec4 , \cf10 \strokec10 details\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 logSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 logSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 insertSheet\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 LOG_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 logSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 ([\cf8 \strokec8 'Timestamp'\cf4 \strokec4 , \cf8 \strokec8 'Action'\cf4 \strokec4 , \cf8 \strokec8 'Status'\cf4 \strokec4 , \cf8 \strokec8 'Details'\cf4 \strokec4 ]);\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logSheet\cf4 \strokec4 .\cf10 \strokec10 appendRow\cf4 \strokec4 ([\cb1 \
\cb3     \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ().\cf10 \strokec10 toISOString\cf4 \strokec4 (),\cb1 \
\cb3     \cf10 \strokec10 action\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 status\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 details\cf4 \cb1 \strokec4 \
\cb3   ]);\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Verify date parsing and conversion by testing a selected cell\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Helpful for debugging date issues\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 verifyDateCell\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get the active cell\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 activeCell\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getActiveCell\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 activeCell\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Please select a cell containing a date value to verify.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get the value from the cell\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 cellValue\cf4 \strokec4  = \cf10 \strokec10 activeCell\cf4 \strokec4 .\cf10 \strokec10 getValue\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Try to convert it to an ISO date\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 isoDate\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 cellValue\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Prepare detailed information about the cell value\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 detailedInfo\cf4 \strokec4  = \cf8 \strokec8 "Cell: "\cf4 \strokec4  + \cf10 \strokec10 activeCell\cf4 \strokec4 .\cf10 \strokec10 getA1Notation\cf4 \strokec4 () + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Raw Value: "\cf4 \strokec4  + \cf7 \strokec7 JSON\cf4 \strokec4 .\cf10 \strokec10 stringify\cf4 \strokec4 (\cf10 \strokec10 cellValue\cf4 \strokec4 ) + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Type: "\cf4 \strokec4  + \cf6 \strokec6 typeof\cf4 \strokec4  \cf10 \strokec10 cellValue\cf4 \strokec4  + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 cellValue\cf4 \strokec4  \cf6 \strokec6 instanceof\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Is Date Object: Yes\\n"\cf4 \strokec4 ;\cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Timestamp: "\cf4 \strokec4  + \cf10 \strokec10 cellValue\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 () + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "toString(): "\cf4 \strokec4  + \cf10 \strokec10 cellValue\cf4 \strokec4 .\cf10 \strokec10 toString\cf4 \strokec4 () + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Is Date Object: No\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "\\nConverted to ISO: "\cf4 \strokec4  + (\cf10 \strokec10 isoDate\cf4 \strokec4  || \cf8 \strokec8 "FAILED"\cf4 \strokec4 ) + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 isoDate\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 // Try to calculate an end time (for +60 minutes)\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 endTime\cf4 \strokec4  = \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 isoDate\cf4 \strokec4 , \cf9 \strokec9 60\cf4 \strokec4 );\cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Calculated End Time (60 mins): "\cf4 \strokec4  + \cf10 \strokec10 endTime\cf4 \strokec4  + \cf8 \strokec8 "\\n"\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 // Show the difference\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 startDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 isoDate\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 endDate\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf7 \strokec7 Date\cf4 \strokec4 (\cf10 \strokec10 endTime\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 diffMinutes\cf4 \strokec4  = (\cf10 \strokec10 endDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 () - \cf10 \strokec10 startDate\cf4 \strokec4 .\cf10 \strokec10 getTime\cf4 \strokec4 ()) / (\cf9 \strokec9 60\cf4 \strokec4  * \cf9 \strokec9 1000\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf10 \strokec10 detailedInfo\cf4 \strokec4  += \cf8 \strokec8 "Time Difference: "\cf4 \strokec4  + \cf10 \strokec10 diffMinutes\cf4 \strokec4  + \cf8 \strokec8 " minutes\\n"\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Log the results\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Verify Date Cell'\cf4 \strokec4 , \cf8 \strokec8 'Info'\cf4 \strokec4 , \cf10 \strokec10 detailedInfo\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Show the results\cf4 \cb1 \strokec4 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Date Cell Verification'\cf4 \strokec4 , \cf10 \strokec10 detailedInfo\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Fix all date-related fields in the target sheet\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * Use this function if you need to repair dates after a migration\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf10 \strokec10 fixAllDates\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ss\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 ui\cf4 \strokec4  = \cf7 \strokec7 SpreadsheetApp\cf4 \strokec4 .\cf10 \strokec10 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 targetSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf10 \strokec10 targetSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Target sheet "'\cf4 \strokec4  + \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 TARGET_SHEET_NAME\cf4 \strokec4  + \cf8 \strokec8 '" not found.'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Confirm before proceeding\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 response\cf4 \strokec4  = \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cb1 \
\cb3     \cf8 \strokec8 'Confirm Date Fix'\cf4 \strokec4 ,\cb1 \
\cb3     \cf8 \strokec8 'This will update all start times, end times, and date of birth fields in the Appointments sheet. Proceed?'\cf4 \strokec4 ,\cb1 \
\cb3     \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 YES_NO\cf4 \cb1 \strokec4 \
\cb3   );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 response\cf4 \strokec4  != \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 Button\cf4 \strokec4 .\cf7 \strokec7 YES\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Get all data (excluding header row)\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 data\cf4 \strokec4  = \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastRow\cf4 \strokec4 () - \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedRows\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 errorRows\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 // Process each row\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4  < \cf10 \strokec10 data\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 row\cf4 \strokec4  = \cf10 \strokec10 data\cf4 \strokec4 [\cf10 \strokec10 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 rowChanged\cf4 \strokec4  = \cf6 \strokec6 false\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Fix client date of birth (column 4 in 1-based = index 3 in 0-based)\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 3\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 dobValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 3\cf4 \strokec4 ];\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedDob\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 dobValue\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedDob\cf4 \strokec4  && \cf10 \strokec10 fixedDob\cf4 \strokec4  !== \cf10 \strokec10 dobValue\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 4\cf4 \strokec4 ).\cf10 \strokec10 setValue\cf4 \strokec4 (\cf10 \strokec10 fixedDob\cf4 \strokec4 );\cb1 \
\cb3           \cf10 \strokec10 rowChanged\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Fix start time (column 9 in 1-based = index 8 in 0-based)\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 startValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 8\cf4 \strokec4 ];\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedStart\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 startValue\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedStart\cf4 \strokec4  && \cf10 \strokec10 fixedStart\cf4 \strokec4  !== \cf10 \strokec10 startValue\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 9\cf4 \strokec4 ).\cf10 \strokec10 setValue\cf4 \strokec4 (\cf10 \strokec10 fixedStart\cf4 \strokec4 );\cb1 \
\cb3           \cf10 \strokec10 rowChanged\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 // Fix/recalculate end time based on fixed start time\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedStart\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 // Look for Duration column in the source data to get accurate duration\cf4 \cb1 \strokec4 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceSheet\cf4 \strokec4  = \cf10 \strokec10 ss\cf4 \strokec4 .\cf10 \strokec10 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 SOURCE_SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 appointmentId\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ].\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 ();\cb1 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 duration\cf4 \strokec4  = \cf7 \strokec7 CONFIG\cf4 \strokec4 .\cf7 \strokec7 DEFAULT_DURATION\cf4 \strokec4 ; \cf5 \strokec5 // Default\cf4 \cb1 \strokec4 \
\cb3           \cb1 \
\cb3           \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 sourceSheet\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 // Get source headers and find Duration column\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceHeaders\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getLastColumn\cf4 \strokec4 ()).\cf10 \strokec10 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3             \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 columnMap\cf4 \strokec4  = \cf10 \strokec10 createIntakeQColumnMap\cf4 \strokec4 (\cf10 \strokec10 sourceHeaders\cf4 \strokec4 );\cb1 \
\cb3             \cb1 \
\cb3             \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3               \cf5 \strokec5 // Find this appointment in source data\cf4 \cb1 \strokec4 \
\cb3               \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceData\cf4 \strokec4  = \cf10 \strokec10 sourceSheet\cf4 \strokec4 .\cf10 \strokec10 getDataRange\cf4 \strokec4 ().\cf10 \strokec10 getValues\cf4 \strokec4 ();\cb1 \
\cb3               \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 j\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf10 \strokec10 j\cf4 \strokec4  < \cf10 \strokec10 sourceData\cf4 \strokec4 .\cf10 \strokec10 length\cf4 \strokec4 ; \cf10 \strokec10 j\cf4 \strokec4 ++) \{\cb1 \
\cb3                 \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceRow\cf4 \strokec4  = \cf10 \strokec10 sourceData\cf4 \strokec4 [\cf10 \strokec10 j\cf4 \strokec4 ];\cb1 \
\cb3                 \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceId\cf4 \strokec4  = \cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4  >= \cf9 \strokec9 0\cf4 \strokec4  ? \cf10 \strokec10 sourceRow\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 appointmentId\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 ().\cf10 \strokec10 trim\cf4 \strokec4 () : \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3                 \cb1 \
\cb3                 \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 sourceId\cf4 \strokec4  === \cf10 \strokec10 appointmentId\cf4 \strokec4 ) \{\cb1 \
\cb3                   \cf5 \strokec5 // Found the appointment, get duration\cf4 \cb1 \strokec4 \
\cb3                   \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 sourceDuration\cf4 \strokec4  = \cf10 \strokec10 sourceRow\cf4 \strokec4 [\cf10 \strokec10 columnMap\cf4 \strokec4 .\cf10 \strokec10 duration\cf4 \strokec4 ];\cb1 \
\cb3                   \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 sourceDuration\cf4 \strokec4  && !\cf10 \strokec10 isNaN\cf4 \strokec4 (\cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 sourceDuration\cf4 \strokec4 , \cf9 \strokec9 10\cf4 \strokec4 ))) \{\cb1 \
\cb3                     \cf10 \strokec10 duration\cf4 \strokec4  = \cf10 \strokec10 parseInt\cf4 \strokec4 (\cf10 \strokec10 sourceDuration\cf4 \strokec4 , \cf9 \strokec9 10\cf4 \strokec4 );\cb1 \
\cb3                   \}\cb1 \
\cb3                   \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3                 \}\cb1 \
\cb3               \}\cb1 \
\cb3             \}\cb1 \
\cb3           \}\cb1 \
\cb3           \cb1 \
\cb3           \cf5 \strokec5 // Calculate end time based on fixed start time and duration\cf4 \cb1 \strokec4 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedEnd\cf4 \strokec4  = \cf10 \strokec10 calculateEndTime\cf4 \strokec4 (\cf10 \strokec10 fixedStart\cf4 \strokec4 , \cf10 \strokec10 duration\cf4 \strokec4 );\cb1 \
\cb3           \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 currentEnd\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 9\cf4 \strokec4 ]?.\cf10 \strokec10 toString\cf4 \strokec4 () || \cf8 \strokec8 ''\cf4 \strokec4 ;\cb1 \
\cb3           \cb1 \
\cb3           \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedEnd\cf4 \strokec4  && \cf10 \strokec10 fixedEnd\cf4 \strokec4  !== \cf10 \strokec10 currentEnd\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 10\cf4 \strokec4 ).\cf10 \strokec10 setValue\cf4 \strokec4 (\cf10 \strokec10 fixedEnd\cf4 \strokec4 );\cb1 \
\cb3             \cf10 \strokec10 rowChanged\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3           \}\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 // Fix last updated (column 13 in 1-based = index 12 in 0-based)\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 lastUpdatedValue\cf4 \strokec4  = \cf10 \strokec10 row\cf4 \strokec4 [\cf9 \strokec9 12\cf4 \strokec4 ];\cb1 \
\cb3         \cf6 \strokec6 var\cf4 \strokec4  \cf10 \strokec10 fixedLastUpdated\cf4 \strokec4  = \cf10 \strokec10 convertToISODate\cf4 \strokec4 (\cf10 \strokec10 lastUpdatedValue\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 fixedLastUpdated\cf4 \strokec4  && \cf10 \strokec10 fixedLastUpdated\cf4 \strokec4  !== \cf10 \strokec10 lastUpdatedValue\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf10 \strokec10 targetSheet\cf4 \strokec4 .\cf10 \strokec10 getRange\cf4 \strokec4 (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 , \cf9 \strokec9 13\cf4 \strokec4 ).\cf10 \strokec10 setValue\cf4 \strokec4 (\cf10 \strokec10 fixedLastUpdated\cf4 \strokec4 );\cb1 \
\cb3           \cf10 \strokec10 rowChanged\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf10 \strokec10 rowChanged\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf10 \strokec10 fixedRows\cf4 \strokec4 ++;\cb1 \
\cb3       \}\cb1 \
\cb3     \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf10 \strokec10 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Date Fix Error'\cf4 \strokec4 , \cf8 \strokec8 'Error'\cf4 \strokec4 , \cf8 \strokec8 'Row '\cf4 \strokec4  + (\cf10 \strokec10 i\cf4 \strokec4  + \cf9 \strokec9 2\cf4 \strokec4 ) + \cf8 \strokec8 ': '\cf4 \strokec4  + \cf10 \strokec10 error\cf4 \strokec4 .\cf10 \strokec10 message\cf4 \strokec4 );\cb1 \
\cb3       \cf10 \strokec10 errorRows\cf4 \strokec4 ++;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 logAction\cf4 \strokec4 (\cf8 \strokec8 'Fix All Dates Complete'\cf4 \strokec4 , \cf8 \strokec8 'Success'\cf4 \strokec4 , \cf8 \strokec8 'Fixed dates in '\cf4 \strokec4  + \cf10 \strokec10 fixedRows\cf4 \strokec4  + \cf8 \strokec8 ' rows, with '\cf4 \strokec4  + \cf10 \strokec10 errorRows\cf4 \strokec4  + \cf8 \strokec8 ' errors'\cf4 \strokec4 );\cb1 \
\cb3   \cf10 \strokec10 ui\cf4 \strokec4 .\cf10 \strokec10 alert\cf4 \strokec4 (\cf8 \strokec8 'Date Fix Complete'\cf4 \strokec4 , \cf8 \strokec8 'Fixed dates in '\cf4 \strokec4  + \cf10 \strokec10 fixedRows\cf4 \strokec4  + \cf8 \strokec8 ' rows, with '\cf4 \strokec4  + \cf10 \strokec10 errorRows\cf4 \strokec4  + \cf8 \strokec8 ' errors'\cf4 \strokec4 , \cf10 \strokec10 ui\cf4 \strokec4 .\cf7 \strokec7 ButtonSet\cf4 \strokec4 .\cf7 \strokec7 OK\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
}