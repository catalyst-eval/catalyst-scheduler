{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red21\green98\blue39;\red20\green67\blue174;\red24\green25\blue27;\red186\green6\blue115;\red18\green115\blue126;
\red162\green0\blue16;}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c7451\c45098\c20000;\cssrgb\c9412\c35294\c73725;\cssrgb\c12549\c12941\c14118;\cssrgb\c78824\c15294\c52549;\cssrgb\c3529\c52157\c56863;
\cssrgb\c70196\c7843\c7059;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Apps Script for processing "Office Update Requests" form submissions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // Updated version for Client ID-based form with correct handling of mobility/sensory needs\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Creates a time-based trigger to run processNewFormSubmissions hourly\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 setupTrigger\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 // Delete any existing triggers to avoid duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 triggers\cf4 \strokec4  = \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 getProjectTriggers\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 triggers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 triggers\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ].\cf7 \strokec7 getHandlerFunction\cf4 \strokec4 () === \cf10 \strokec10 'processNewFormSubmissions'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 deleteTrigger\cf4 \strokec4 (\cf7 \strokec7 triggers\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ]);\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Create new hourly trigger\cf4 \cb1 \strokec4 \
\cb3   \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 newTrigger\cf4 \strokec4 (\cf10 \strokec10 'processNewFormSubmissions'\cf4 \strokec4 )\cb1 \
\cb3     .\cf7 \strokec7 timeBased\cf4 \strokec4 ()\cb1 \
\cb3     .\cf7 \strokec7 everyHours\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 )\cb1 \
\cb3     .\cf7 \strokec7 create\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Hourly trigger for form processing has been set up'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Setup spreadsheet edit trigger to catch new form submissions\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * This is an alternative to the direct form trigger\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 setupSpreadsheetTrigger\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 // Delete any existing triggers to avoid duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 triggers\cf4 \strokec4  = \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 getProjectTriggers\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 triggers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 triggers\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ].\cf7 \strokec7 getHandlerFunction\cf4 \strokec4 () === \cf10 \strokec10 'checkForNewSubmissions'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 deleteTrigger\cf4 \strokec4 (\cf7 \strokec7 triggers\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ]);\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Create a trigger that runs when the spreadsheet is edited\cf4 \cb1 \strokec4 \
\cb3   \cf8 \strokec8 ScriptApp\cf4 \strokec4 .\cf7 \strokec7 newTrigger\cf4 \strokec4 (\cf10 \strokec10 'checkForNewSubmissions'\cf4 \strokec4 )\cb1 \
\cb3     .\cf7 \strokec7 forSpreadsheet\cf4 \strokec4 (\cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf7 \strokec7 getActive\cf4 \strokec4 ())\cb1 \
\cb3     .\cf7 \strokec7 onFormSubmit\cf4 \strokec4 ()\cb1 \
\cb3     .\cf7 \strokec7 create\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Spreadsheet form submission trigger has been set up'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Check for new form submissions and send notifications\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 checkForNewSubmissions\cf4 \strokec4 (\cf7 \strokec7 e\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf2 \strokec2 // e.values contains the values in the order they appear on the form\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // e.values[0] is the timestamp, which is always present in form submissions\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 e\cf4 \strokec4  || !\cf7 \strokec7 e\cf4 \strokec4 .\cf7 \strokec7 values\cf4 \strokec4  || !\cf7 \strokec7 e\cf4 \strokec4 .\cf7 \strokec7 values\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ]) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'No valid form submission data found'\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Get form response sheet\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 formSheet\cf4 \strokec4  = \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf7 \strokec7 getActiveSpreadsheet\cf4 \strokec4 ().\cf7 \strokec7 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Office_Update_Requests'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 formSheet\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Office_Update_Requests sheet not found'\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Get the headers\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 headers\cf4 \strokec4  = \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getLastColumn\cf4 \strokec4 ()).\cf7 \strokec7 getValues\cf4 \strokec4 ()[\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Create submission data object\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 submissionData\cf4 \strokec4  = \{\};\cb1 \
\cb3     \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 i\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 e\cf4 \strokec4 .\cf7 \strokec7 values\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 submissionData\cf4 \strokec4 [\cf7 \strokec7 headers\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ]] = \cf7 \strokec7 e\cf4 \strokec4 .\cf7 \strokec7 values\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ];\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Create email body\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 emailBody\cf4 \strokec4  = \cf10 \strokec10 'A new Office Update Request has been submitted:\\n\\n'\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Add each field\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 const\cf4 \strokec4  [\cf7 \strokec7 title\cf4 \strokec4 , \cf7 \strokec7 response\cf4 \strokec4 ] \cf6 \strokec6 of\cf4 \strokec4  \cf8 \strokec8 Object\cf4 \strokec4 .\cf7 \strokec7 entries\cf4 \strokec4 (\cf7 \strokec7 submissionData\cf4 \strokec4 )) \{\cb1 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 response\cf4 \strokec4 ) \{ \cf2 \strokec2 // Only include non-empty fields\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 emailBody\cf4 \strokec4  += \cf10 \strokec10 `\cf4 \strokec4 $\{\cf7 \strokec7 title\cf4 \strokec4 \}\cf10 \strokec10 : \cf4 \strokec4 $\{\cf7 \strokec7 response\cf4 \strokec4 \}\cf10 \strokec10 \\n`\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Add timestamp\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 emailBody\cf4 \strokec4  += \cf10 \strokec10 `\\nSubmission Time: \cf4 \strokec4 $\{\cf6 \strokec6 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 ().\cf7 \strokec7 toLocaleString\cf4 \strokec4 ()\}\cf10 \strokec10 `\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Send email notification\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 MailApp\cf4 \strokec4 .\cf7 \strokec7 sendEmail\cf4 \strokec4 (\{\cb1 \
\cb3       \cf7 \strokec7 to\cf4 \strokec4 : \cf10 \strokec10 "admin@bridgefamilytherapy.com"\cf4 \strokec4 ,\cb1 \
\cb3       \cf7 \strokec7 subject\cf4 \strokec4 : \cf10 \strokec10 "New Office Update Request Submitted"\cf4 \strokec4 ,\cb1 \
\cb3       \cf7 \strokec7 body\cf4 \strokec4 : \cf7 \strokec7 emailBody\cf4 \cb1 \strokec4 \
\cb3     \});\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Form submission notification email sent'\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Optionally process right away (or you can rely on the hourly trigger)\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 processNewFormSubmissions\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3   \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf7 \strokec7 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Error handling form submission: '\cf4 \strokec4  + \cf7 \strokec7 error\cf4 \strokec4 .\cf7 \strokec7 message\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Process new form submissions and update appropriate sheets\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 processNewFormSubmissions\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 ss\cf4 \strokec4  = \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf7 \strokec7 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Access the form responses sheet\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 formSheet\cf4 \strokec4  = \cf7 \strokec7 ss\cf4 \strokec4 .\cf7 \strokec7 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Office_Update_Requests'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 formSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Office_Update_Requests sheet not found'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Get all data including headers\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 data\cf4 \strokec4  = \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getDataRange\cf4 \strokec4 ().\cf7 \strokec7 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 data\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4  <= \cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'No form submissions to process'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Get headers row\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 headers\cf4 \strokec4  = \cf7 \strokec7 data\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Found headers: '\cf4 \strokec4  + \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ));\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Find column indices by header name - this approach is position-independent\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 timestampCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Timestamp'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clinicianNameCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Clinician Name'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clientIdCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Client Id'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessibilityNeedsCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Is there an accessibility need?'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 requiredOfficeCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Is there a required office? Only select if client would have high difficulty with room changes.'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 yogaSwingCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Is a yoga swing required? Only select if minor client\\'s therapy experience would be reduced by its absence.'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Process columns - may already exist in your sheet\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 processedCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Processed'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 processingTimestampCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Processing Timestamp'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 errorCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'Processing Error'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Log the current column positions\cf4 \cb1 \strokec4 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Column positions: \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10     Timestamp: \cf4 \strokec4 $\{\cf7 \strokec7 timestampCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Clinician: \cf4 \strokec4 $\{\cf7 \strokec7 clinicianNameCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     ClientId: \cf4 \strokec4 $\{\cf7 \strokec7 clientIdCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Accessibility: \cf4 \strokec4 $\{\cf7 \strokec7 accessibilityNeedsCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Office: \cf4 \strokec4 $\{\cf7 \strokec7 requiredOfficeCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Yoga: \cf4 \strokec4 $\{\cf7 \strokec7 yogaSwingCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Processed: \cf4 \strokec4 $\{\cf7 \strokec7 processedCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     ProcessingTimestamp: \cf4 \strokec4 $\{\cf7 \strokec7 processingTimestampCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     Error: \cf4 \strokec4 $\{\cf7 \strokec7 errorCol\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf2 \strokec2 // Add processing columns if they don't exist\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 columnsAdded\cf4 \strokec4  = \cf6 \strokec6 false\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 processedCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Processed'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 processedCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ;\cb1 \
\cb3     \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'Processed'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 columnsAdded\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Added 'Processed' column at position \cf4 \strokec4 $\{\cf7 \strokec7 processedCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 processingTimestampCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Processing Timestamp'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 processingTimestampCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ;\cb1 \
\cb3     \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'Processing Timestamp'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 columnsAdded\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Added 'Processing Timestamp' column at position \cf4 \strokec4 $\{\cf7 \strokec7 processingTimestampCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 errorCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Processing Error'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 errorCol\cf4 \strokec4  = \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ;\cb1 \
\cb3     \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'Processing Error'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 columnsAdded\cf4 \strokec4  = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Added 'Processing Error' column at position \cf4 \strokec4 $\{\cf7 \strokec7 errorCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // If we added columns, refresh the data array\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 columnsAdded\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Extend each row with empty values for the new columns\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 data\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf6 \strokec6 while\cf4 \strokec4  (\cf7 \strokec7 data\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ].\cf7 \strokec7 length\cf4 \strokec4  < \cf7 \strokec7 headers\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 data\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ].\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 ''\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Extended data rows to match new headers length'\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Access the Client_Accessibility_Info sheet\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4  = \cf7 \strokec7 ss\cf4 \strokec4 .\cf7 \strokec7 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Client_Accessibility_Info'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Client_Accessibility_Info sheet not found'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Get all client accessibility data including headers\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessibilityData\cf4 \strokec4  = \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getDataRange\cf4 \strokec4 ().\cf7 \strokec7 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4  = \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ];\cb1 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Client_Accessibility_Info headers: '\cf4 \strokec4  + \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ));\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Find client accessibility column indices - position-independent\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessClientIdCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'clientId'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clientNameAccessCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'clientName'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 lastUpdatedCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'lastUpdated'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'hasMobilityNeeds'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'mobilityDetails'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'hasSensoryNeeds'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'sensoryDetails'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'accessibilityNotes'\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4  = \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 indexOf\cf4 \strokec4 (\cf10 \strokec10 'requiredOffice'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Log client accessibility columns\cf4 \cb1 \strokec4 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Client_Accessibility_Info columns: \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10     clientId: \cf4 \strokec4 $\{\cf7 \strokec7 accessClientIdCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     clientName: \cf4 \strokec4 $\{\cf7 \strokec7 clientNameAccessCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     lastUpdated: \cf4 \strokec4 $\{\cf7 \strokec7 lastUpdatedCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     hasMobilityNeeds: \cf4 \strokec4 $\{\cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4 \}\cf10 \strokec10 ,\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     mobilityDetails: \cf4 \strokec4 $\{\cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     hasSensoryNeeds: \cf4 \strokec4 $\{\cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4 \}\cf10 \strokec10 ,\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     sensoryDetails: \cf4 \strokec4 $\{\cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4 \}\cf10 \strokec10 ,\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     accessibilityNotes: \cf4 \strokec4 $\{\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 \}\cf10 \strokec10 , \cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10     requiredOffice: \cf4 \strokec4 $\{\cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf2 \strokec2 // Check for required columns\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 accessClientIdCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf7 \strokec7 clientNameAccessCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf7 \strokec7 lastUpdatedCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cb1 \
\cb3       \cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4  || \cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'ERROR: Required columns missing in Client_Accessibility_Info sheet'\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 // List the missing columns for debugging\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 missingCols\cf4 \strokec4  = [];\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 accessClientIdCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'clientId'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 clientNameAccessCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'clientName'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 lastUpdatedCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'lastUpdated'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'hasMobilityNeeds'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'accessibilityNotes'\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf10 \strokec10 'requiredOffice'\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Missing columns: '\cf4 \strokec4  + \cf7 \strokec7 missingCols\cf4 \strokec4 .\cf7 \strokec7 join\cf4 \strokec4 (\cf10 \strokec10 ', '\cf4 \strokec4 ));\cb1 \
\cb3     \cf6 \strokec6 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 processed\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 errors\cf4 \strokec4  = \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Process each unprocessed submission (starting from row 2)\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 i\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4  < \cf7 \strokec7 data\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 row\cf4 \strokec4  = \cf7 \strokec7 data\cf4 \strokec4 [\cf7 \strokec7 i\cf4 \strokec4 ];\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Skip if already processed\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 processedCol\cf4 \strokec4 ] === \cf10 \strokec10 'Yes'\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Skipping already processed row \cf4 \strokec4 $\{\cf7 \strokec7 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 continue\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf2 \strokec2 // Extract form data\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 timestamp\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 timestampCol\cf4 \strokec4 ];\cb1 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clinicianName\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 clinicianNameCol\cf4 \strokec4 ];\cb1 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 clientId\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 clientIdCol\cf4 \strokec4 ]; \cf2 \strokec2 // Using Client Id directly\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Parse accessibility needs - this could be a comma-separated list or an array\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 accessibilityNeedsCol\cf4 \strokec4 ];\cb1 \
\cb3       \cf2 \strokec2 // Handle case where accessibilityNeeds could be an array or string\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf8 \strokec8 Array\cf4 \strokec4 .\cf7 \strokec7 isArray\cf4 \strokec4 (\cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4  = \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 .\cf7 \strokec7 join\cf4 \strokec4 (\cf10 \strokec10 ", "\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 requiredOffice\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 requiredOfficeCol\cf4 \strokec4 ];\cb1 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 yogaSwing\cf4 \strokec4  = \cf7 \strokec7 row\cf4 \strokec4 [\cf7 \strokec7 yogaSwingCol\cf4 \strokec4 ];\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Check if mobility needs are specified\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 hasMobility\cf4 \strokec4  = \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4  && \cb1 \
\cb3                           (\cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 .\cf7 \strokec7 includes\cf4 \strokec4 (\cf10 \strokec10 'Mobility'\cf4 \strokec4 ) || \cb1 \
\cb3                            \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 .\cf7 \strokec7 includes\cf4 \strokec4 (\cf10 \strokec10 'ground floor'\cf4 \strokec4 ));\cb1 \
\cb3       \cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Processing request for client ID: \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10  from clinician: \cf4 \strokec4 $\{\cf7 \strokec7 clinicianName\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Data: Accessibility=\cf4 \strokec4 $\{\cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 \}\cf10 \strokec10 , Office=\cf4 \strokec4 $\{\cf7 \strokec7 requiredOffice\cf4 \strokec4 \}\cf10 \strokec10 , Yoga=\cf4 \strokec4 $\{\cf7 \strokec7 yogaSwing\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Has Mobility Needs: \cf4 \strokec4 $\{\cf7 \strokec7 hasMobility\cf4 \strokec4 \}\cf10 \strokec10 , Has Yoga Swing: \cf4 \strokec4 $\{\cf7 \strokec7 yogaSwing\cf4 \strokec4  === \cf10 \strokec10 'Yes'\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Find client in accessibility sheet by clientId\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 clientRow\cf4 \strokec4  = -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 for\cf4 \strokec4  (\cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 j\cf4 \strokec4  = \cf9 \strokec9 1\cf4 \strokec4 ; \cf7 \strokec7 j\cf4 \strokec4  < \cf7 \strokec7 accessibilityData\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ; \cf7 \strokec7 j\cf4 \strokec4 ++) \{\cb1 \
\cb3         \cf2 \strokec2 // Convert both IDs to strings for comparison - handle numbers stored as strings\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 storedId\cf4 \strokec4  = \cf8 \strokec8 String\cf4 \strokec4 (\cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 j\cf4 \strokec4 ][\cf7 \strokec7 accessClientIdCol\cf4 \strokec4 ]).\cf7 \strokec7 trim\cf4 \strokec4 ();\cb1 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 formId\cf4 \strokec4  = \cf8 \strokec8 String\cf4 \strokec4 (\cf7 \strokec7 clientId\cf4 \strokec4 ).\cf7 \strokec7 trim\cf4 \strokec4 ();\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 storedId\cf4 \strokec4  === \cf7 \strokec7 formId\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 clientRow\cf4 \strokec4  = \cf7 \strokec7 j\cf4 \strokec4 ;\cb1 \
\cb3           \cf6 \strokec6 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // If client doesn't exist, add a new row\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 clientRow\cf4 \strokec4  === -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10  not found in Client_Accessibility_Info. Adding new entry.`\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Create a new row at the end of the sheet\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 clientRow\cf4 \strokec4  = \cf7 \strokec7 accessibilityData\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Create new client entry - minimal data\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 newClientEntry\cf4 \strokec4  = \cf8 \strokec8 Array\cf4 \strokec4 (\cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 ).\cf7 \strokec7 fill\cf4 \strokec4 (\cf10 \strokec10 ''\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 newClientEntry\cf4 \strokec4 [\cf7 \strokec7 accessClientIdCol\cf4 \strokec4 ] = \cf7 \strokec7 clientId\cf4 \strokec4 ;  \cf2 \strokec2 // Use the provided ID\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 accessibilityData\cf4 \strokec4 .\cf7 \strokec7 push\cf4 \strokec4 (\cf7 \strokec7 newClientEntry\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Add the new row to the sheet\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 range\cf4 \strokec4  = \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 accessibilityHeaders\cf4 \strokec4 .\cf7 \strokec7 length\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 range\cf4 \strokec4 .\cf7 \strokec7 setValues\cf4 \strokec4 ([\cf7 \strokec7 newClientEntry\cf4 \strokec4 ]);\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Added new client row at position \cf4 \strokec4 $\{\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10  with ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update client accessibility data\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 now\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 ().\cf7 \strokec7 toISOString\cf4 \strokec4 ();\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Set Last Updated\cf4 \cb1 \strokec4 \
\cb3       \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 lastUpdatedCol\cf4 \strokec4 ] = \cf7 \strokec7 now\cf4 \strokec4 ;\cb1 \
\cb3       \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 lastUpdatedCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 now\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // IMPROVED HANDLING FOR MOBILITY AND SENSORY NEEDS\cf4 \cb1 \strokec4 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // First - reset values to ensure proper state\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 resetNeeds\cf4 \strokec4  = (\cf7 \strokec7 needsCol\cf4 \strokec4 , \cf7 \strokec7 detailsCol\cf4 \strokec4 ) => \{\cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 needsCol\cf4 \strokec4  !== -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 needsCol\cf4 \strokec4 ] = \cf6 \strokec6 false\cf4 \strokec4 ;\cb1 \
\cb3           \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 needsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf6 \strokec6 false\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 detailsCol\cf4 \strokec4  !== -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 detailsCol\cf4 \strokec4 ] = \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3           \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 detailsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 ''\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \};\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Reset both needs unless explicitly set in this submission\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 hasMobility\cf4 \strokec4  && \cf7 \strokec7 yogaSwing\cf4 \strokec4  !== \cf10 \strokec10 'Yes'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 resetNeeds\cf4 \strokec4 (\cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4 , \cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4 );\cb1 \
\cb3         \cf7 \strokec7 resetNeeds\cf4 \strokec4 (\cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4 , \cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Reset mobility and sensory needs to FALSE for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3         \cf2 \strokec2 // Only reset needs that aren't being set in this submission\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 hasMobility\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 resetNeeds\cf4 \strokec4 (\cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4 , \cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Reset mobility needs to FALSE for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 yogaSwing\cf4 \strokec4  !== \cf10 \strokec10 'Yes'\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 resetNeeds\cf4 \strokec4 (\cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4 , \cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Reset sensory needs to FALSE for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update accessibility needs - MOBILITY\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 accessibilityNeeds\cf4 \strokec4  && \cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 .\cf7 \strokec7 trim\cf4 \strokec4 () !== \cf10 \strokec10 ''\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 hasMobility\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf2 \strokec2 // Set mobility needs\cf4 \cb1 \strokec4 \
\cb3           \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4 ] = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3           \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 hasMobilityNeedsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf6 \strokec6 true\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Set hasMobilityNeeds=TRUE for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3           \cb1 \
\cb3           \cf2 \strokec2 // Set mobility details if column exists\cf4 \cb1 \strokec4 \
\cb3           \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4  !== -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4 ] = \cf10 \strokec10 'Ground floor access required'\cf4 \strokec4 ;\cb1 \
\cb3             \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 mobilityDetailsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Ground floor access required'\cf4 \strokec4 );\cb1 \
\cb3           \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Add to accessibilityNotes\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] || \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 accessibilityNote\cf4 \strokec4  = \cf10 \strokec10 `Accessibility needs reported by \cf4 \strokec4 $\{\cf7 \strokec7 clinicianName\cf4 \strokec4 \}\cf10 \strokec10  on \cf4 \strokec4 $\{\cf7 \strokec7 formatDate\cf4 \strokec4 (\cf7 \strokec7 timestamp\cf4 \strokec4 )\}\cf10 \strokec10 :\\n\cf4 \strokec4 $\{\cf7 \strokec7 accessibilityNeeds\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 notes\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 notes\cf4 \strokec4  + \cf10 \strokec10 '\\n\\n'\cf4 \strokec4  + \cf7 \strokec7 accessibilityNote\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 accessibilityNote\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] = \cf7 \strokec7 notes\cf4 \strokec4 ;\cb1 \
\cb3         \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 notes\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Updated accessibility notes for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update required office\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 requiredOffice\cf4 \strokec4  && \cf7 \strokec7 requiredOffice\cf4 \strokec4  !== \cf10 \strokec10 ''\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4 ] = \cf7 \strokec7 requiredOffice\cf4 \strokec4 ;\cb1 \
\cb3         \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 requiredOfficeAccessCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 requiredOffice\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Set requiredOffice=\cf4 \strokec4 $\{\cf7 \strokec7 requiredOffice\cf4 \strokec4 \}\cf10 \strokec10  for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Add to accessibilityNotes\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] || \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 officeNote\cf4 \strokec4  = \cf10 \strokec10 `Office \cf4 \strokec4 $\{\cf7 \strokec7 requiredOffice\cf4 \strokec4 \}\cf10 \strokec10  required due to client having difficulty with room changes. Requested by \cf4 \strokec4 $\{\cf7 \strokec7 clinicianName\cf4 \strokec4 \}\cf10 \strokec10  on \cf4 \strokec4 $\{\cf7 \strokec7 formatDate\cf4 \strokec4 (\cf7 \strokec7 timestamp\cf4 \strokec4 )\}\cf10 \strokec10 .`\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 notes\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 notes\cf4 \strokec4  + \cf10 \strokec10 '\\n\\n'\cf4 \strokec4  + \cf7 \strokec7 officeNote\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 officeNote\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] = \cf7 \strokec7 notes\cf4 \strokec4 ;\cb1 \
\cb3         \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 notes\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update yoga swing requirement - SENSORY NEED\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 yogaSwing\cf4 \strokec4  === \cf10 \strokec10 'Yes'\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Set sensory needs if that column exists\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4  !== -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4 ] = \cf6 \strokec6 true\cf4 \strokec4 ;\cb1 \
\cb3           \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 hasSensoryNeedsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf6 \strokec6 true\cf4 \strokec4 );\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Set hasSensoryNeeds=TRUE for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Set sensory details if column exists\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4  !== -\cf9 \strokec9 1\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4 ] = \cf10 \strokec10 'Requires yoga swing'\cf4 \strokec4 ;\cb1 \
\cb3           \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 sensoryDetailsCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Requires yoga swing'\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Add to accessibilityNotes with the specific tag needed for office assignment\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 let\cf4 \strokec4  \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] || \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 yogaNote\cf4 \strokec4  = \cf10 \strokec10 `Client requires yoga swing (yoga-swing). Requested by \cf4 \strokec4 $\{\cf7 \strokec7 clinicianName\cf4 \strokec4 \}\cf10 \strokec10  on \cf4 \strokec4 $\{\cf7 \strokec7 formatDate\cf4 \strokec4 (\cf7 \strokec7 timestamp\cf4 \strokec4 )\}\cf10 \strokec10 .`\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 notes\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 notes\cf4 \strokec4  + \cf10 \strokec10 '\\n\\n'\cf4 \strokec4  + \cf7 \strokec7 yogaNote\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf7 \strokec7 notes\cf4 \strokec4  = \cf7 \strokec7 yogaNote\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 accessibilityData\cf4 \strokec4 [\cf7 \strokec7 clientRow\cf4 \strokec4 ][\cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4 ] = \cf7 \strokec7 notes\cf4 \strokec4 ;\cb1 \
\cb3         \cf7 \strokec7 clientAccessibilitySheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 clientRow\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 accessibilityNotesCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 notes\cf4 \strokec4 );\cb1 \
\cb3         \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Added yoga-swing tag for client ID \cf4 \strokec4 $\{\cf7 \strokec7 clientId\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Mark as processed\cf4 \cb1 \strokec4 \
\cb3       \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 processedCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf10 \strokec10 'Yes'\cf4 \strokec4 );\cb1 \
\cb3       \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 processingTimestampCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf6 \strokec6 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 ().\cf7 \strokec7 toISOString\cf4 \strokec4 ());\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Marked row \cf4 \strokec4 $\{\cf7 \strokec7 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10  as processed`\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf7 \strokec7 processed\cf4 \strokec4 ++;\cb1 \
\cb3       \cb1 \
\cb3     \} \cf6 \strokec6 catch\cf4 \strokec4  (\cf7 \strokec7 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Error processing row \cf4 \strokec4 $\{\cf7 \strokec7 i\cf4 \strokec4 +\cf9 \strokec9 1\cf4 \strokec4 \}\cf10 \strokec10 : \cf4 \strokec4 $\{\cf7 \strokec7 error\cf4 \strokec4 .\cf7 \strokec7 message\cf4 \strokec4 \}\cf10 \strokec10 `\cf4 \strokec4 );\cb1 \
\cb3       \cf7 \strokec7 errors\cf4 \strokec4 ++;\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Mark error in sheet\cf4 \cb1 \strokec4 \
\cb3       \cf7 \strokec7 formSheet\cf4 \strokec4 .\cf7 \strokec7 getRange\cf4 \strokec4 (\cf7 \strokec7 i\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 , \cf7 \strokec7 errorCol\cf4 \strokec4  + \cf9 \strokec9 1\cf4 \strokec4 ).\cf7 \strokec7 setValue\cf4 \strokec4 (\cf7 \strokec7 error\cf4 \strokec4 .\cf7 \strokec7 message\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Log results\cf4 \cb1 \strokec4 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 `Form processing complete. Processed \cf4 \strokec4 $\{\cf7 \strokec7 processed\cf4 \strokec4 \}\cf10 \strokec10  requests with \cf4 \strokec4 $\{\cf7 \strokec7 errors\cf4 \strokec4 \}\cf10 \strokec10  errors.`\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Log to audit log if applicable\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf7 \strokec7 ss\cf4 \strokec4 .\cf7 \strokec7 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Audit_Log'\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf6 \strokec6 const\cf4 \strokec4  \cf7 \strokec7 auditSheet\cf4 \strokec4  = \cf7 \strokec7 ss\cf4 \strokec4 .\cf7 \strokec7 getSheetByName\cf4 \strokec4 (\cf10 \strokec10 'Audit_Log'\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 auditSheet\cf4 \strokec4 .\cf7 \strokec7 appendRow\cf4 \strokec4 ([\cb1 \
\cb3       \cf6 \strokec6 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 ().\cf7 \strokec7 toISOString\cf4 \strokec4 (),\cb1 \
\cb3       \cf10 \strokec10 'FORM_PROCESSING'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 `Processed \cf4 \strokec4 $\{\cf7 \strokec7 processed\cf4 \strokec4 \}\cf10 \strokec10  office requests with \cf4 \strokec4 $\{\cf7 \strokec7 errors\cf4 \strokec4 \}\cf10 \strokec10  errors`\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 'SYSTEM'\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 ''\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 ''\cf4 \strokec4 ,\cb1 \
\cb3       \cf10 \strokec10 `Hourly form processing job`\cf4 \cb1 \strokec4 \
\cb3     ]);\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf7 \strokec7 log\cf4 \strokec4 (\cf10 \strokec10 'Added entry to Audit_Log'\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Format date for readability\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 formatDate\cf4 \strokec4 (\cf7 \strokec7 date\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 if\cf4 \strokec4  (!\cf7 \strokec7 date\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf10 \strokec10 ''\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (\cf6 \strokec6 typeof\cf4 \strokec4  \cf7 \strokec7 date\cf4 \strokec4  === \cf10 \strokec10 'string'\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 date\cf4 \strokec4  = \cf6 \strokec6 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 (\cf7 \strokec7 date\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf8 \strokec8 Utilities\cf4 \strokec4 .\cf7 \strokec7 formatDate\cf4 \strokec4 (\cf7 \strokec7 date\cf4 \strokec4 , \cf8 \strokec8 Session\cf4 \strokec4 .\cf7 \strokec7 getScriptTimeZone\cf4 \strokec4 (), \cf10 \strokec10 'MMM dd, yyyy h:mm a'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 /**\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  * Add this function to run manually for testing\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 function\cf4 \strokec4  \cf7 \strokec7 testProcessing\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 processNewFormSubmissions\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
}